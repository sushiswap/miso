{
  "address": "0x039F112C113737a98080C0e8942112e72711B04A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract MISOAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmFactory",
      "outputs": [
        {
          "internalType": "contract IMisoFarmFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_batchAuction",
          "type": "address"
        }
      ],
      "name": "getBatchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "commitmentsTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumCommitmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.BatchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdsale",
          "type": "address"
        }
      ],
      "name": "getCrowdsaleInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "goal",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.CrowdsaleInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_document",
          "type": "address"
        }
      ],
      "name": "getDocuments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "data",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lastModified",
              "type": "uint256"
            }
          ],
          "internalType": "struct DocumentHepler.Document[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_dutchAuction",
          "type": "address"
        }
      ],
      "name": "getDutchAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "startPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.DutchAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getFarmDetail",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo",
          "name": "farmInfo",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "farm",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpAllowance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct FarmHelper.UserPoolInfo[]",
          "name": "userInfos",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getFarms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFarms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        }
      ],
      "name": "getFarms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusMultiplier",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "rewardToken",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "lpToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "allocPoint",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastRewardBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "accRewardsPerShare",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct TokenHelper.TokenInfo",
                  "name": "stakingToken",
                  "type": "tuple"
                }
              ],
              "internalType": "struct FarmHelper.PoolInfo[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct FarmHelper.FarmInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_hyperbolicAuction",
          "type": "address"
        }
      ],
      "name": "getHyperbolicAuctionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentCurrency",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTokens",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minimumPrice",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "alpha",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "commitmentsTotal",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "usePointList",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "auctionSuccessful",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "paymentCurrencyInfo",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "data",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "lastModified",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DocumentHepler.Document[]",
              "name": "documents",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct MarketHelper.HyperbolicAuctionInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "templateId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "tokenInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct MarketHelper.MarketBaseInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRewardsPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "decimals",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                }
              ],
              "internalType": "struct TokenHelper.TokenInfo",
              "name": "stakingToken",
              "type": "tuple"
            }
          ],
          "internalType": "struct FarmHelper.PoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pageSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pageNbr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "getTokensInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct TokenHelper.TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_action",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserMarketInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "commitments",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokensClaimable",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimed",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAdmin",
              "type": "bool"
            }
          ],
          "internalType": "struct MarketHelper.UserMarketInfo",
          "name": "userInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserPoolsInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "farm",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "pids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "totalStaked",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "pendingRewards",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FarmHelper.UserPoolsInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "launcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IMisoMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_launcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_farmFactory",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract IMisoTokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf3d581fee84bd7771bfd7b98e4518a970140a012842325f70f17b0e44beb890",
  "receipt": {
    "to": null,
    "from": "0x5DB5bEdffa57dc3DcEF5D0201eD747E4BC114650",
    "contractAddress": "0x039F112C113737a98080C0e8942112e72711B04A",
    "transactionIndex": 1,
    "gasUsed": "3892432",
    "logsBloom": "0x
    "blockHash": "0xcbf2ec9558ca1577017b55107a18b1a7044bbe1aa47a9b3e7602b431082a2883",
    "transactionHash": "0xcf3d581fee84bd7771bfd7b98e4518a970140a012842325f70f17b0e44beb890",
    "logs": [],
    "blockNumber": 11254642,
    "cumulativeGasUsed": "5196561",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9cF4A7b95fE81F8850fdc066dA88c992D451410",
    "0xcDf8F6d9996d60e6708d84182F2FbCE4AF4885b2",
    "0x1fAB2dAc55b7892BE14cf2d11AB6Be74540b5602",
    "0x1a2333f33b4a5A584e2C648f0135Bf19B4E7aAAE",
    "0xc579D8B4541e5b1092eeCC1Fc027680259DE59cb"
  ],
  "solcInputHash": "1fb438077347298e0d57961a6b349fd4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract MISOAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmFactory\",\"outputs\":[{\"internalType\":\"contract IMisoFarmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_batchAuction\",\"type\":\"address\"}],\"name\":\"getBatchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"commitmentsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumCommitmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.BatchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdsale\",\"type\":\"address\"}],\"name\":\"getCrowdsaleInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"goal\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.CrowdsaleInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_document\",\"type\":\"address\"}],\"name\":\"getDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dutchAuction\",\"type\":\"address\"}],\"name\":\"getDutchAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.DutchAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getFarmDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo\",\"name\":\"farmInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct FarmHelper.UserPoolInfo[]\",\"name\":\"userInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getFarms\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarms\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"getFarms\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusMultiplier\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"rewardToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FarmHelper.FarmInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_hyperbolicAuction\",\"type\":\"address\"}],\"name\":\"getHyperbolicAuctionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTokens\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minimumPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"alpha\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"commitmentsTotal\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usePointList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"auctionSuccessful\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"paymentCurrencyInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"}],\"internalType\":\"struct DocumentHepler.Document[]\",\"name\":\"documents\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MarketHelper.HyperbolicAuctionInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"templateId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"tokenInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct MarketHelper.MarketBaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"stakingToken\",\"type\":\"tuple\"}],\"internalType\":\"struct FarmHelper.PoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pageSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pageNbr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"getTokensInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct TokenHelper.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_action\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMarketInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"commitments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"internalType\":\"struct MarketHelper.UserMarketInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPoolsInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalStaked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingRewards\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FarmHelper.UserPoolsInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IMisoMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_launcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_farmFactory\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract IMisoTokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accessControls()\":{\"notice\":\"Responsible for access rights to the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Helper/MISOHelper.sol\":\"MISOHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/MISOAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./MISOAdminAccess.sol\\\";\\n\\n/**\\n * @notice Access Controls\\n * @author Attr: BlockRocket.tech\\n */\\ncontract MISOAccessControls is MISOAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdb3765654240248cec4a2e8bb2cd33164dbdd631118833eea52bd6199cc39c13\",\"license\":\"GPL-3.0-only\"},\"contracts/Access/MISOAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\n\\ncontract MISOAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x90b919dd0f8bb50174e958858fe7d025e6b9a096ca5aa5516f812342af398262\",\"license\":\"GPL-3.0-only\"},\"contracts/Helper/MISOHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Access/MISOAccessControls.sol\\\";\\n\\n//==================\\n//    Uniswap V2       \\n//==================\\n\\ninterface IUniswapFactory {\\n    function getPair(address token0, address token1) external view returns (address);\\n}\\n\\ninterface IUniswapPair {\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner) external view returns (uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n}\\n\\n//==================\\n//    Documents       \\n//==================\\n\\ninterface IDocument {\\n    function getDocument(string calldata _name) external view returns (string memory, uint256);\\n    function getDocumentCount() external view returns (uint256);\\n    function getDocumentName(uint256 index) external view returns (string memory);    \\n}\\n\\ncontract DocumentHepler {\\n    struct Document {\\n        string name;\\n        string data;\\n        uint256 lastModified;\\n    }\\n\\n    function getDocuments(address _document) public view returns(Document[] memory) {\\n        IDocument document = IDocument(_document);\\n        uint256 documentCount = document.getDocumentCount();\\n\\n        Document[] memory documents = new Document[](documentCount);\\n\\n        for(uint256 i = 0; i < documentCount; i++) {\\n            string memory documentName = document.getDocumentName(i);\\n            (\\n                documents[i].data,\\n                documents[i].lastModified\\n            ) = document.getDocument(documentName);\\n            documents[i].name = documentName;\\n        }\\n        return documents;\\n    }\\n}\\n\\n\\n//==================\\n//     Tokens\\n//==================\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IMisoTokenFactory {\\n    function getTokens() external view returns (address[] memory);\\n    function tokens(uint256) external view returns (address);\\n    function numberOfTokens() external view returns (uint256);\\n} \\n\\ncontract TokenHelper {\\n    struct TokenInfo {\\n        address addr;\\n        uint256 decimals;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function getTokensInfo(address[] memory addresses) public view returns (TokenInfo[] memory)\\n    {\\n        TokenInfo[] memory infos = new TokenInfo[](addresses.length);\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            infos[i] = getTokenInfo(addresses[i]);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokenInfo(address _address) public view returns (TokenInfo memory) {\\n        TokenInfo memory info;\\n        IERC20 token = IERC20(_address);\\n\\n        info.addr = _address;\\n        info.name = token.name();\\n        info.symbol = token.symbol();\\n        info.decimals = token.decimals();\\n\\n        return info;\\n    }\\n\\n    function allowance(address _token, address _owner, address _spender) public view returns(uint256) {\\n        return IERC20(_token).allowance(_owner, _spender);\\n    }\\n\\n}\\n\\n\\n//==================\\n//      Base\\n//==================\\n\\ncontract BaseHelper {\\n    IMisoMarketFactory public market;\\n    IMisoTokenFactory public tokenFactory;\\n    IMisoFarmFactory public farmFactory;\\n    address public launcher;\\n\\n    /// @notice Responsible for access rights to the contract\\n    MISOAccessControls public accessControls;\\n\\n    function setContracts(\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher,\\n        address _farmFactory\\n    ) public {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOHelper: Sender must be Admin\\\"\\n        );\\n        if (_market != address(0)) {\\n            market = IMisoMarketFactory(_market);\\n        }\\n        if (_tokenFactory != address(0)) {\\n            tokenFactory = IMisoTokenFactory(_tokenFactory);\\n        }\\n        if (_launcher != address(0)) {\\n            launcher = _launcher;\\n        }\\n        if (_farmFactory != address(0)) {\\n            farmFactory = IMisoFarmFactory(_farmFactory);\\n        }\\n    }\\n}\\n\\n\\n//==================\\n//      Farms       \\n//==================\\n\\ninterface IMisoFarmFactory {\\n    function getTemplateId(address _farm) external view returns(uint256);\\n    function numberOfFarms() external view returns(uint256);\\n    function farms(uint256 _farmId) external view returns(address);\\n}\\n\\ninterface IFarm {\\n    function poolInfo(uint256 pid) external view returns(\\n        address lpToken,\\n        uint256 allocPoint,\\n        uint256 lastRewardBlock,\\n        uint256 accRewardsPerShare\\n    );\\n    function rewards() external view returns(address);\\n    function poolLength() external view returns (uint256);\\n    function rewardsPerBlock() external view returns (uint256);\\n    function bonusMultiplier() external view returns (uint256);\\n    function userInfo(uint256 pid, address _user) external view returns (uint256, uint256);\\n    function pendingRewards(uint256 _pid, address _user) external view returns (uint256);\\n}\\n\\ncontract FarmHelper is BaseHelper, TokenHelper {\\n    struct FarmInfo {\\n        address addr;\\n        uint256 templateId;\\n        uint256 rewardsPerBlock;\\n        uint256 bonusMultiplier;\\n        TokenInfo rewardToken;\\n        PoolInfo[] pools;\\n    }\\n\\n    struct PoolInfo {\\n        address lpToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accRewardsPerShare;\\n        uint256 totalStaked;\\n        TokenInfo stakingToken;\\n    }\\n\\n    struct UserPoolInfo {\\n        address farm;\\n        uint256 pid;\\n        uint256 totalStaked;\\n        uint256 lpBalance;\\n        uint256 lpAllowance;\\n        uint256 rewardDebt;\\n        uint256 pendingRewards;\\n    }\\n\\n    struct UserPoolsInfo {\\n        address farm;\\n        uint256[] pids;\\n        uint256[] totalStaked;\\n        uint256[] pendingRewards;\\n    }\\n\\n    function getPools(address _farm) public view returns(PoolInfo[] memory) {\\n        IFarm farm = IFarm(_farm);\\n        uint256 poolLength = farm.poolLength();\\n        PoolInfo[] memory pools = new PoolInfo[](poolLength);\\n        \\n        for(uint256 i = 0; i < poolLength; i++) {\\n            (\\n                pools[i].lpToken,\\n                pools[i].allocPoint,\\n                pools[i].lastRewardBlock,\\n                pools[i].accRewardsPerShare\\n            ) = farm.poolInfo(i);\\n            pools[i].totalStaked = IERC20(pools[i].lpToken).balanceOf(_farm);\\n            pools[i].stakingToken = getTokenInfo(pools[i].lpToken);\\n        }\\n        return pools;\\n    }\\n\\n\\n    function getFarms() public view returns(FarmInfo[] memory) {\\n        uint256 numberOfFarms = farmFactory.numberOfFarms();\\n\\n        FarmInfo[] memory infos = new FarmInfo[](numberOfFarms);\\n\\n        for (uint256 i = 0; i < numberOfFarms; i++) {\\n            address farmAddr = farmFactory.farms(i);\\n            uint256 templateId = farmFactory.getTemplateId(farmAddr);\\n            infos[i] = _farmInfo(farmAddr);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getFarms(\\n        uint256 pageSize,\\n        uint256 pageNbr,\\n        uint256 offset\\n    ) public view returns(FarmInfo[] memory) {\\n        uint256 numberOfFarms = farmFactory.numberOfFarms();\\n        uint256 startIdx = (pageNbr * pageSize) + offset;\\n        uint256 endIdx = startIdx + pageSize;\\n\\n        FarmInfo[] memory infos;\\n\\n        if (endIdx > numberOfFarms) {\\n            endIdx = numberOfFarms;\\n        }\\n        if(endIdx < startIdx) {\\n            return infos;\\n        }\\n        infos = new FarmInfo[](endIdx - startIdx);\\n\\n        for (uint256 farmIdx = 0; farmIdx + startIdx < endIdx; farmIdx++) {\\n            address farmAddr = farmFactory.farms(farmIdx + startIdx);\\n            infos[farmIdx] = _farmInfo(farmAddr);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getFarms(\\n        uint256 pageSize,\\n        uint256 pageNbr\\n    ) public view returns(FarmInfo[] memory) {\\n        return getFarms(pageSize, pageNbr, 0);\\n    }\\n\\n    function _farmInfo(address _farmAddr) private view returns(FarmInfo memory farmInfo) {\\n            IFarm farm = IFarm(_farmAddr);\\n\\n            farmInfo.addr = _farmAddr;\\n            farmInfo.templateId = farmFactory.getTemplateId(_farmAddr);\\n            farmInfo.rewardsPerBlock = farm.rewardsPerBlock();\\n            farmInfo.bonusMultiplier = farm.bonusMultiplier();\\n            farmInfo.rewardToken = getTokenInfo(farm.rewards());\\n            farmInfo.pools = getPools(_farmAddr);\\n    }\\n\\n    function getFarmDetail(address _farm, address _user) \\n        public\\n        view\\n        returns(FarmInfo memory farmInfo, UserPoolInfo[] memory userInfos) \\n    {\\n        IFarm farm = IFarm(_farm);\\n        farmInfo.addr = _farm;\\n        farmInfo.templateId = farmFactory.getTemplateId(_farm);\\n        farmInfo.rewardsPerBlock = farm.rewardsPerBlock();\\n        farmInfo.bonusMultiplier = farm.bonusMultiplier();\\n        farmInfo.rewardToken = getTokenInfo(farm.rewards());\\n        farmInfo.pools = getPools(_farm);\\n\\n        if(_user != address(0)) {\\n            PoolInfo[] memory pools = farmInfo.pools;\\n            userInfos = new UserPoolInfo[](pools.length);\\n            for(uint i = 0; i < pools.length; i++) {\\n                UserPoolInfo memory userInfo = userInfos[i];\\n                address stakingToken = pools[i].stakingToken.addr;\\n                (userInfo.totalStaked, userInfo.rewardDebt) = farm.userInfo(i, _user);\\n                userInfo.lpBalance = IERC20(stakingToken).balanceOf(_user);\\n                userInfo.lpAllowance = IERC20(stakingToken).allowance(_user, _farm);\\n                userInfo.pendingRewards = farm.pendingRewards(i, _user);\\n                (userInfo.totalStaked,) = farm.userInfo(i, _user);\\n                userInfo.farm = _farm;\\n                userInfo.pid = i;\\n                userInfos[i] = userInfo;\\n            }\\n        }\\n        return (farmInfo, userInfos);\\n    }\\n\\n    function getUserPoolsInfos(address _user) public view returns(UserPoolsInfo[] memory) {\\n        uint256 numberOfFarms = farmFactory.numberOfFarms();\\n\\n        UserPoolsInfo[] memory infos = new UserPoolsInfo[](numberOfFarms);\\n\\n        for (uint256 i = 0; i < numberOfFarms; i++) {\\n            address farmAddr = farmFactory.farms(i);\\n            IFarm farm = IFarm(farmAddr);\\n            uint256 poolLength = farm.poolLength();\\n            uint256[] memory totalStaked = new uint256[](poolLength);\\n            uint256[] memory pendingRewards = new uint256[](poolLength);\\n            uint256[] memory pids = new uint256[](poolLength);\\n\\n            for(uint256 j = 0; j < poolLength; j++) {\\n                (address stakingToken,,,) = farm.poolInfo(j);\\n                (totalStaked[j],) = farm.userInfo(j, _user);\\n                pendingRewards[j] = farm.pendingRewards(j, _user);\\n                pids[j] = j;\\n            }\\n            infos[i].totalStaked = totalStaked;\\n            infos[i].pendingRewards = pendingRewards;\\n            infos[i].pids = pids;\\n            infos[i].farm = farmAddr;\\n        }\\n        return infos;\\n    }\\n}\\n\\n//==================\\n//     Markets       \\n//==================\\n\\ninterface IBaseAuction {\\n    function getBaseInformation() external view returns (\\n            address auctionToken,\\n            uint64 startTime,\\n            uint64 endTime,\\n            bool finalized\\n        );\\n}\\n\\ninterface IMisoMarketFactory {\\n    function getMarketTemplateId(address _auction) external view returns(uint64);\\n    function getMarkets() external view returns(address[] memory);\\n    function numberOfAuctions() external view returns(uint256);\\n    function auctions(uint256) external view returns(address);\\n}\\n\\ninterface IMisoMarket {\\n    function paymentCurrency() external view returns (address) ;\\n    function auctionToken() external view returns (address) ;\\n    function marketPrice() external view returns (uint128, uint128);\\n    function marketInfo()\\n        external\\n        view\\n        returns (\\n        uint64 startTime,\\n        uint64 endTime,\\n        uint128 totalTokens\\n        );\\n    function auctionSuccessful() external view returns (bool);\\n    function commitments(address user) external view returns (uint256);\\n    function claimed(address user) external view returns (uint256);\\n    function tokensClaimable(address user) external view returns (uint256);\\n    function hasAdminRole(address user) external view returns (bool);\\n}\\n\\ninterface ICrowdsale is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IDutchAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n    // function totalTokensCommitted() external view returns (uint256);\\n    // function clearingPrice() external view returns (uint256);\\n}\\n\\ninterface IBatchAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint256 commitmentsTotal,\\n        uint256 minimumCommitmentAmount,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ninterface IHyperbolicAuction is IMisoMarket {\\n    function marketStatus() external view returns(\\n        uint128 commitmentsTotal,\\n        bool finalized,\\n        bool usePointList\\n    );\\n}\\n\\ncontract MarketHelper is BaseHelper, TokenHelper, DocumentHepler {\\n\\n    address constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    struct CrowdsaleInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint128 commitmentsTotal;\\n        uint128 totalTokens;\\n        uint128 rate;\\n        uint128 goal;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct DutchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 startPrice;\\n        uint128 minimumPrice;\\n        uint128 commitmentsTotal;\\n        // uint256 totalTokensCommitted;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct BatchAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint256 commitmentsTotal;\\n        uint256 minimumCommitmentAmount;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct HyperbolicAuctionInfo {\\n        address addr;\\n        address paymentCurrency;\\n        uint64 startTime;\\n        uint64 endTime;\\n        uint128 totalTokens;\\n        uint128 minimumPrice;\\n        uint128 alpha;\\n        uint128 commitmentsTotal;\\n        bool finalized;\\n        bool usePointList;\\n        bool auctionSuccessful;\\n        TokenInfo tokenInfo;\\n        TokenInfo paymentCurrencyInfo;\\n        Document[] documents;\\n    }\\n\\n    struct MarketBaseInfo {\\n        address addr;\\n        uint64 templateId;\\n        uint64 startTime;\\n        uint64 endTime;\\n        bool finalized;\\n        TokenInfo tokenInfo;\\n    }\\n\\n    struct PLInfo {\\n        TokenInfo token0;\\n        TokenInfo token1;\\n        address pairToken;\\n        address operator;\\n        uint256 locktime;\\n        uint256 unlock;\\n        uint256 deadline;\\n        uint256 launchwindow;\\n        uint256 expiry;\\n        uint256 liquidityAdded;\\n        uint256 launched;\\n    }\\n\\n    struct UserMarketInfo {\\n        uint256 commitments;\\n        uint256 tokensClaimable;\\n        uint256 claimed;\\n        bool isAdmin;\\n    }\\n\\n    function getMarkets(\\n        uint256 pageSize,\\n        uint256 pageNbr,\\n        uint256 offset\\n    ) public view returns (MarketBaseInfo[] memory) {\\n        uint256 marketsLength = market.numberOfAuctions();\\n        uint256 startIdx = (pageNbr * pageSize) + offset;\\n        uint256 endIdx = startIdx + pageSize;\\n        MarketBaseInfo[] memory infos;\\n        if (endIdx > marketsLength) {\\n            endIdx = marketsLength;\\n        }\\n        if(endIdx < startIdx) {\\n            return infos;\\n        }\\n        infos = new MarketBaseInfo[](endIdx - startIdx);\\n\\n        for (uint256 marketIdx = 0; marketIdx + startIdx < endIdx; marketIdx++) {\\n            address marketAddress = market.auctions(marketIdx + startIdx);\\n            infos[marketIdx] = _getMarketInfo(marketAddress);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getMarkets(\\n        uint256 pageSize,\\n        uint256 pageNbr\\n    ) public view returns (MarketBaseInfo[] memory) {\\n        return getMarkets(pageSize, pageNbr, 0);\\n    }\\n\\n    function getMarkets() public view returns (MarketBaseInfo[] memory) {\\n        address[] memory markets = market.getMarkets();\\n        MarketBaseInfo[] memory infos = new MarketBaseInfo[](markets.length);\\n\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            MarketBaseInfo memory marketInfo = _getMarketInfo(markets[i]);\\n            infos[i] = marketInfo;\\n        }\\n\\n        return infos;\\n    }\\n\\n    function _getMarketInfo(address _marketAddress) private view returns (MarketBaseInfo memory marketInfo) {\\n            uint64 templateId = market.getMarketTemplateId(_marketAddress);\\n            address auctionToken;\\n            uint64 startTime;\\n            uint64 endTime;\\n            bool finalized;\\n            (auctionToken, startTime, endTime, finalized) = IBaseAuction(_marketAddress)\\n                .getBaseInformation();\\n            TokenInfo memory tokenInfo = getTokenInfo(auctionToken);\\n\\n            marketInfo.addr = _marketAddress;\\n            marketInfo.templateId = templateId;\\n            marketInfo.startTime = startTime;\\n            marketInfo.endTime = endTime;\\n            marketInfo.finalized = finalized;\\n            marketInfo.tokenInfo = tokenInfo;  \\n    }\\n\\n    function getCrowdsaleInfo(address _crowdsale) public view returns (CrowdsaleInfo memory) {\\n        ICrowdsale crowdsale = ICrowdsale(_crowdsale);\\n        CrowdsaleInfo memory info;\\n\\n        info.addr = address(crowdsale);\\n        (info.commitmentsTotal, info.finalized, info.usePointList) = crowdsale.marketStatus();\\n        (info.startTime, info.endTime, info.totalTokens) = crowdsale.marketInfo();\\n        (info.rate, info.goal) = crowdsale.marketPrice();\\n        (info.auctionSuccessful) = crowdsale.auctionSuccessful();\\n        info.tokenInfo = getTokenInfo(crowdsale.auctionToken());\\n\\n        address paymentCurrency = crowdsale.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n\\n        info.documents = getDocuments(_crowdsale);\\n\\n        return info;\\n    }\\n\\n    function getDutchAuctionInfo(address payable _dutchAuction) public view returns (DutchAuctionInfo memory)\\n    {\\n        IDutchAuction dutchAuction = IDutchAuction(_dutchAuction);\\n        DutchAuctionInfo memory info;\\n\\n        info.addr = address(dutchAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = dutchAuction.marketInfo();\\n        (info.startPrice, info.minimumPrice) = dutchAuction.marketPrice();\\n        (info.auctionSuccessful) = dutchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = dutchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(dutchAuction.auctionToken());\\n\\n        address paymentCurrency = dutchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_dutchAuction);\\n\\n        return info;\\n    }\\n\\n    function getBatchAuctionInfo(address payable _batchAuction) public view returns (BatchAuctionInfo memory) \\n    {\\n        IBatchAuction batchAuction = IBatchAuction(_batchAuction);\\n        BatchAuctionInfo memory info;\\n        \\n        info.addr = address(batchAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = batchAuction.marketInfo();\\n        (info.auctionSuccessful) = batchAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.minimumCommitmentAmount,\\n            info.finalized,\\n            info.usePointList\\n        ) = batchAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(batchAuction.auctionToken());\\n        address paymentCurrency = batchAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_batchAuction);\\n\\n        return info;\\n    }\\n\\n    function getHyperbolicAuctionInfo(address payable _hyperbolicAuction) public view returns (HyperbolicAuctionInfo memory)\\n    {\\n        IHyperbolicAuction hyperbolicAuction = IHyperbolicAuction(_hyperbolicAuction);\\n        HyperbolicAuctionInfo memory info;\\n\\n        info.addr = address(hyperbolicAuction);\\n        (info.startTime, info.endTime, info.totalTokens) = hyperbolicAuction.marketInfo();\\n        (info.minimumPrice, info.alpha) = hyperbolicAuction.marketPrice();\\n        (info.auctionSuccessful) = hyperbolicAuction.auctionSuccessful();\\n        (\\n            info.commitmentsTotal,\\n            info.finalized,\\n            info.usePointList\\n        ) = hyperbolicAuction.marketStatus();\\n        info.tokenInfo = getTokenInfo(hyperbolicAuction.auctionToken());\\n        \\n        address paymentCurrency = hyperbolicAuction.paymentCurrency();\\n        TokenInfo memory paymentCurrencyInfo;\\n        if(paymentCurrency == ETH_ADDRESS) {\\n            paymentCurrencyInfo = _getETHInfo();\\n        } else {\\n            paymentCurrencyInfo = getTokenInfo(paymentCurrency);\\n        }\\n        info.paymentCurrencyInfo = paymentCurrencyInfo;\\n        info.documents = getDocuments(_hyperbolicAuction);\\n\\n        return info;\\n    }\\n\\n    function getUserMarketInfo(address _action, address _user) public view returns(UserMarketInfo memory userInfo) {\\n        IMisoMarket market = IMisoMarket(_action);\\n        userInfo.commitments = market.commitments(_user);\\n        userInfo.tokensClaimable = market.tokensClaimable(_user);\\n        userInfo.claimed = market.claimed(_user);\\n        userInfo.isAdmin = market.hasAdminRole(_user);\\n    }\\n\\n    function _getETHInfo() private pure returns(TokenInfo memory token) {\\n            token.addr = ETH_ADDRESS;\\n            token.name = \\\"ETHEREUM\\\";\\n            token.symbol = \\\"ETH\\\";\\n            token.decimals = 18;\\n    }\\n\\n}\\n\\ncontract MISOHelper is MarketHelper, FarmHelper {\\n\\n    constructor(\\n        address _accessControls,\\n        address _tokenFactory,\\n        address _market,\\n        address _launcher,\\n        address _farmFactory\\n    ) public { \\n        require(_accessControls != address(0));\\n        accessControls = MISOAccessControls(_accessControls);\\n        tokenFactory = IMisoTokenFactory(_tokenFactory);\\n        market = IMisoMarketFactory(_market);\\n        launcher = _launcher;\\n        farmFactory = IMisoFarmFactory(_farmFactory);\\n    }\\n\\n    function getTokens() public view returns(TokenInfo[] memory) {\\n        address[] memory tokens = tokenFactory.getTokens();\\n        TokenInfo[] memory infos = getTokensInfo(tokens);\\n\\n        infos = getTokensInfo(tokens);\\n\\n        return infos;\\n    }\\n\\n    function getTokens(\\n        uint256 pageSize,\\n        uint256 pageNbr,\\n        uint256 offset\\n    ) public view returns(TokenInfo[] memory) {\\n        uint256 tokensLength = tokenFactory.numberOfTokens();\\n\\n        uint256 startIdx = (pageNbr * pageSize) + offset;\\n        uint256 endIdx = startIdx + pageSize;\\n        TokenInfo[] memory infos;\\n        if (endIdx > tokensLength) {\\n            endIdx = tokensLength;\\n        }\\n        if(endIdx < startIdx) {\\n            return infos;\\n        }\\n        infos = new TokenInfo[](endIdx - startIdx);\\n\\n        for (uint256 tokenIdx = 0; tokenIdx + startIdx < endIdx; tokenIdx++) {\\n            address tokenAddress = tokenFactory.tokens(tokenIdx + startIdx);\\n            infos[tokenIdx] = getTokenInfo(tokenAddress);\\n        }\\n\\n        return infos;\\n    }\\n\\n    function getTokens(\\n        uint256 pageSize,\\n        uint256 pageNbr\\n    ) public view returns(TokenInfo[] memory) {\\n        return getTokens(pageSize, pageNbr, 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x8607d980c5a8d7884a991e78ddff89347898981dfb3fab189afd1d270e9132a2\",\"license\":\"GPL-3.0-only\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6711f5cfe992294baa43dd8d1d39f2caa1f62761d65abeb3f2a405833da794f2\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x408ed1e8d180f17597080e993fea24a26ec262dd56ee20dfbdcf511d261387d4\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7a5437ee09401a3d1ec98f126470362f9848afbf521510d6bfae61d7b42a8fb7\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80635c39f467116100f9578063927da10511610097578063bce16f4b11610071578063bce16f4b146103ce578063bf989b6e146103e1578063e77772fe146103f6578063ec2c9016146103fe576101a9565b8063927da1051461039e5780639dc4ac8a146103be578063aa6ca808146103c6576101a9565b80636d25e175116100d35780636d25e17514610373578063748365ef1461037b57806380968d481461038357806380f5560514610396576101a9565b80635c39f467146103405780636306377d146101d757806364d414bf14610360576101a9565b806327f50a2d116101665780633c74720c116101405780633c74720c146102cc57806346a0fe47146102ec578063494cfc6c1461030c57806356468ddf1461031f576101a9565b806327f50a2d1461026c578063372cfb931461028c57806338d9893b146102ac576101a9565b80630cbf4ba7146101ae578063156ec681146101d757806316eebd1e146101f7578063193d13621461020c5780631f69565f1461022c57806322aeea091461024c575b600080fd5b6101c16101bc366004613394565b610406565b6040516101ce9190613e3a565b60405180910390f35b6101ea6101e5366004613394565b61092e565b6040516101ce919061414c565b6101ff610ce3565b6040516101ce9190613c3e565b61021f61021a366004613394565b610cf2565b6040516101ce9190613f28565b61023f61023a366004613394565b610fe0565b6040516101ce91906141ec565b61025f61025a3660046137f1565b611176565b6040516101ce9190613ccc565b61027f61027a366004613394565b611349565b6040516101ce9190613c6c565b61029f61029a3660046133cc565b61158d565b6040516101ce91906141ff565b6102bf6102ba3660046137f1565b6117a3565b6040516101ce9190613d1f565b6102df6102da366004613394565b61195d565b6040516101ce9190614035565b6102ff6102fa36600461353f565b611bf2565b6040516101ce9190613de7565b6102ff61031a366004613780565b611c97565b61033261032d3660046133cc565b611cae565b6040516101ce92919061415f565b61035361034e366004613394565b612212565b6040516101ce9190613dd4565b6102ff61036e3660046137f1565b6124d5565b6101ff61269a565b6101ff6126a9565b6102bf610391366004613780565b6126b8565b6101ff6126c6565b6103b16103ac366004613404565b6126d5565b6040516101ce919061422c565b61025f61275e565b6102ff612984565b61025f6103dc366004613780565b612a30565b6103f46103ef36600461344e565b612a3e565b005b6101ff612b94565b6102bf612ba3565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561045857600080fd5b505afa15801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190613768565b90506060816001600160401b03811180156104aa57600080fd5b506040519080825280602002602001820160405280156104e457816020015b6104d161307e565b8152602001906001900390816104c95790505b50905060005b8281101561092657600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea9061052390859060040161422c565b60206040518083038186803b15801561053b57600080fd5b505afa15801561054f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057391906133b0565b905060008190506000816001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed9190613768565b90506060816001600160401b038111801561060757600080fd5b50604051908082528060200260200182016040528015610631578160200160208202803683370190505b5090506060826001600160401b038111801561064c57600080fd5b50604051908082528060200260200182016040528015610676578160200160208202803683370190505b5090506060836001600160401b038111801561069157600080fd5b506040519080825280602002602001820160405280156106bb578160200160208202803683370190505b50905060005b8481101561089a57604051631526fe2760e01b81526000906001600160a01b03881690631526fe27906106f890859060040161422c565b60806040518083038186803b15801561071057600080fd5b505afa158015610724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074891906134a9565b5050509050866001600160a01b03166393f1a40b838f6040518363ffffffff1660e01b815260040161077b929190614235565b604080518083038186803b15801561079257600080fd5b505afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca91906137a1565b508583815181106107d757fe5b602002602001018181525050866001600160a01b031663d18df53c838f6040518363ffffffff1660e01b8152600401610811929190614235565b60206040518083038186803b15801561082957600080fd5b505afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108619190613768565b84838151811061086d57fe5b6020026020010181815250508183838151811061088657fe5b6020908102919091010152506001016106c1565b50828888815181106108a857fe5b602002602001015160400181905250818888815181106108c457fe5b602002602001015160600181905250808888815181106108e057fe5b602002602001015160200181905250858888815181106108fc57fe5b60209081029190910101516001600160a01b0390911690525050600190940193506104ea92505050565b509392505050565b6109366130af565b8161093f6130af565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190613837565b6001600160801b031660808401526001600160401b0390811660608401521660408083019190915280516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b158015610a1b57600080fd5b505afa158015610a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a53919061373a565b6001600160801b0390811660c08401521660a0820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b158015610aa957600080fd5b505afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae19190613667565b15156101408201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926060929190829003018186803b158015610b2957600080fd5b505afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6191906136f9565b151561012084015215156101008301526001600160801b031660e0820152604080516304cfed9960e51b81529051610bfc916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b158015610bc457600080fd5b505afa158015610bd8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023a91906133b0565b8161016001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4057600080fd5b505afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7891906133b0565b9050610c8261312f565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610cb657610caf612cce565b9050610cc2565b610cbf82610fe0565b90505b6101808301819052610cd386611349565b6101a08401525090949350505050565b6003546001600160a01b031681565b610cfa613160565b81610d03613160565b6001600160a01b0382168082526040805162018df760e91b8152905163031bee0091600480820192606092909190829003018186803b158015610d4557600080fd5b505afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190613837565b6001600160801b031660808401526001600160401b0390811660608401521660408083019190915280516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190613667565b15156101208201526040805163e0e081d760e01b815290516001600160a01b0384169163e0e081d7916004808301926080929190829003018186803b158015610e6357600080fd5b505afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906137c4565b1515610100850152151560e084015260c083015260a0820152604080516304cfed9960e51b81529051610ef9916001600160a01b038516916399fdb32091600480820192602092909190829003018186803b158015610bc457600080fd5b8161014001819052506000826001600160a01b0316633d15cc6d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3d57600080fd5b505afa158015610f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7591906133b0565b9050610f7f61312f565b6001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610fb357610fac612cce565b9050610fbf565b610fbc82610fe0565b90505b6101608301819052610fd086611349565b6101808401525090949350505050565b610fe861312f565b610ff061312f565b6001600160a01b038316808252604080516306fdde0360e01b815290518592916306fdde03916004808301926000929190829003018186803b15801561103557600080fd5b505afa158015611049573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110719190810190613683565b8260400181905250806001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110b257600080fd5b505afa1580156110c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110ee9190810190613683565b8260600181905250806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561112f57600080fd5b505afa158015611143573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111679190613878565b60ff1660208301525092915050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112009190613768565b90508385028301808601606083821115611218578391505b8282101561122b57935061134292505050565b8282036001600160401b038111801561124357600080fd5b5060405190808252806020026020018201604052801561127d57816020015b61126a6131be565b8152602001906001900390816112625790505b50905060005b82848201101561133b57600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea906112c0908589019060040161422c565b60206040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131091906133b0565b905061131b81612d3e565b83838151811061132757fe5b602090810291909101015250600101611283565b5093505050505b9392505050565b606060008290506000816001600160a01b0316633d1c22736040518163ffffffff1660e01b815260040160206040518083038186803b15801561138b57600080fd5b505afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c39190613768565b90506060816001600160401b03811180156113dd57600080fd5b5060405190808252806020026020018201604052801561141757816020015b6114046131f6565b8152602001906001900390816113fc5790505b50905060005b828110156115845760405163635aa3f360e11b81526060906001600160a01b0386169063c6b547e69061145490859060040161422c565b60006040518083038186803b15801561146c57600080fd5b505afa158015611480573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114a89190810190613683565b604051631f32da9960e21b81529091506001600160a01b03861690637ccb6a64906114d7908490600401613ee0565b60006040518083038186803b1580156114ef57600080fd5b505afa158015611503573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261152b91908101906136b5565b84848151811061153757fe5b602002602001015160200185858151811061154e57fe5b60200260200101516040018281525082905250508083838151811061156f57fe5b6020908102919091010151525060010161141d565b50949350505050565b611595613217565b60405163e8fcf72360e01b815283906001600160a01b0382169063e8fcf723906115c3908690600401613c3e565b60206040518083038186803b1580156115db57600080fd5b505afa1580156115ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116139190613768565b8252604051634dc80e1560e01b81526001600160a01b03821690634dc80e1590611641908690600401613c3e565b60206040518083038186803b15801561165957600080fd5b505afa15801561166d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116919190613768565b602083015260405163c884ef8360e01b81526001600160a01b0382169063c884ef83906116c2908690600401613c3e565b60206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117129190613768565b6040808401919091525163c395fcb360e01b81526001600160a01b0382169063c395fcb390611745908690600401613c3e565b60206040518083038186803b15801561175d57600080fd5b505afa158015611771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117959190613667565b151560608301525092915050565b600080546040805163286cea3960e11b81529051606093926001600160a01b0316916350d9d472916004808301926020929190829003018186803b1580156117ea57600080fd5b505afa1580156117fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118229190613768565b9050838502830180860160608382111561183a578391505b8282101561184d57935061134292505050565b8282036001600160401b038111801561186557600080fd5b5060405190808252806020026020018201604052801561189f57816020015b61188c613241565b8152602001906001900390816118845790505b50905060005b82848201101561133b57600080546040516302b8d13560e51b81526001600160a01b039091169063571a26a0906118e2908589019060040161422c565b60206040518083038186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193291906133b0565b905061193d81612f20565b83838151811061194957fe5b6020908102919091010152506001016118a5565b6119656130af565b8161196e6130af565b6001600160a01b0382168082526040805163e0e081d760e01b8152905163e0e081d791600480820192606092909190829003018186803b1580156119b157600080fd5b505afa1580156119c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e991906136f9565b151561012084015215156101008301526001600160801b0316604080830191909152805162018df760e91b815290516001600160a01b0384169163031bee00916004808301926060929190829003018186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190613837565b6001600160801b031660608401526001600160401b0390811660e08401521660c0820152604080516308b42a7160e31b815281516001600160a01b038516926345a153889260048082019391829003018186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b18919061373a565b6001600160801b0390811660a0840152166080820152604080516336d0054b60e01b815290516001600160a01b038416916336d0054b916004808301926020929190829003018186803b158015611b6e57600080fd5b505afa158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190613667565b81610140019015159081151581525050610bfc826001600160a01b03166399fdb3206040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc457600080fd5b60608082516001600160401b0381118015611c0c57600080fd5b50604051908082528060200260200182016040528015611c4657816020015b611c3361312f565b815260200190600190039081611c2b5790505b50905060005b8351811015611c9057611c71848281518110611c6457fe5b6020026020010151610fe0565b828281518110611c7d57fe5b6020908102919091010152600101611c4c565b5092915050565b6060611ca5838360006124d5565b90505b92915050565b611cb66131be565b6001600160a01b03808416825260025460405163699af5ed60e11b81526060928692169063d335ebda90611cee908490600401613c3e565b60206040518083038186803b158015611d0657600080fd5b505afa158015611d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3e9190613768565b836020018181525050806001600160a01b0316635eeb67106040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8057600080fd5b505afa158015611d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db89190613768565b836040018181525050806001600160a01b031663a8b973a16040518163ffffffff1660e01b815260040160206040518083038186803b158015611dfa57600080fd5b505afa158015611e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e329190613768565b836060018181525050611e77816001600160a01b0316639ec5a8946040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc457600080fd5b6080840152611e8585612212565b60a08401526001600160a01b0384161561220a5760a083015180516001600160401b0381118015611eb557600080fd5b50604051908082528060200260200182016040528015611eef57816020015b611edc61327d565b815260200190600190039081611ed45790505b50925060005b815181101561220757611f0661327d565b848281518110611f1257fe5b602002602001015190506000838381518110611f2a57fe5b602002602001015160a00151600001519050846001600160a01b03166393f1a40b848a6040518363ffffffff1660e01b8152600401611f6a929190614235565b604080518083038186803b158015611f8157600080fd5b505afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb991906137a1565b60a0840152604080840191909152516370a0823160e01b81526001600160a01b038216906370a0823190611ff1908b90600401613c3e565b60206040518083038186803b15801561200957600080fd5b505afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613768565b6060830152604051636eb1769f60e11b81526001600160a01b0382169063dd62ed3e90612074908b908d90600401613c52565b60206040518083038186803b15801561208c57600080fd5b505afa1580156120a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c49190613768565b60808301526040516334637d4f60e21b81526001600160a01b0386169063d18df53c906120f79086908c90600401614235565b60206040518083038186803b15801561210f57600080fd5b505afa158015612123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121479190613768565b60c08301526040516393f1a40b60e01b81526001600160a01b038616906393f1a40b9061217a9086908c90600401614235565b604080518083038186803b15801561219157600080fd5b505afa1580156121a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c991906137a1565b5060408301526001600160a01b038916825260208201839052855182908790859081106121f257fe5b60209081029190910101525050600101611ef5565b50505b509250929050565b606060008290506000816001600160a01b031663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225457600080fd5b505afa158015612268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228c9190613768565b90506060816001600160401b03811180156122a657600080fd5b506040519080825280602002602001820160405280156122e057816020015b6122cd6132c3565b8152602001906001900390816122c55790505b50905060005b8281101561158457604051631526fe2760e01b81526001600160a01b03851690631526fe279061231a90849060040161422c565b60806040518083038186803b15801561233257600080fd5b505afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a91906134a9565b85858151811061237657fe5b602002602001015160000186868151811061238d57fe5b60200260200101516020018787815181106123a457fe5b60200260200101516040018888815181106123bb57fe5b602090810291909101015160600193909352929091529190526001600160a01b03909116905281518290829081106123ef57fe5b6020026020010151600001516001600160a01b03166370a08231876040518263ffffffff1660e01b81526004016124269190613c3e565b60206040518083038186803b15801561243e57600080fd5b505afa158015612452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124769190613768565b82828151811061248257fe5b602002602001015160800181815250506124b28282815181106124a157fe5b602002602001015160000151610fe0565b8282815181106124be57fe5b602090810291909101015160a001526001016122e6565b60606000600160009054906101000a90046001600160a01b03166001600160a01b031663f9f16ef26040518163ffffffff1660e01b815260040160206040518083038186803b15801561252757600080fd5b505afa15801561253b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255f9190613768565b90508385028301808601606083821115612577578391505b8282101561258a57935061134292505050565b8282036001600160401b03811180156125a257600080fd5b506040519080825280602002602001820160405280156125dc57816020015b6125c961312f565b8152602001906001900390816125c15790505b50905060005b82848201101561133b576001546040516327b2595f60e11b81526000916001600160a01b031690634f64b2be9061261f908589019060040161422c565b60206040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266f91906133b0565b905061267a81610fe0565b83838151811061268657fe5b6020908102919091010152506001016125e2565b6002546001600160a01b031681565b6004546001600160a01b031681565b6060611ca5838360006117a3565b6000546001600160a01b031681565b604051636eb1769f60e11b81526000906001600160a01b0385169063dd62ed3e906127069086908690600401613c52565b60206040518083038186803b15801561271e57600080fd5b505afa158015612732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127569190613768565b949350505050565b60606000600260009054906101000a90046001600160a01b03166001600160a01b0316638f5185e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156127b057600080fd5b505afa1580156127c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e89190613768565b90506060816001600160401b038111801561280257600080fd5b5060405190808252806020026020018201604052801561283c57816020015b6128296131be565b8152602001906001900390816128215790505b50905060005b8281101561297d57600254604051633ed2387560e11b81526000916001600160a01b031690637da470ea9061287b90859060040161422c565b60206040518083038186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cb91906133b0565b60025460405163699af5ed60e11b81529192506000916001600160a01b039091169063d335ebda90612901908590600401613c3e565b60206040518083038186803b15801561291957600080fd5b505afa15801561292d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129519190613768565b905061295c82612d3e565b84848151811061296857fe5b60209081029190910101525050600101612842565b5091505090565b606080600160009054906101000a90046001600160a01b03166001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156129d557600080fd5b505afa1580156129e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a1191908101906135db565b90506060612a1e82611bf2565b9050612a2982611bf2565b9250505090565b6060611ca583836000611176565b6004805460405163c395fcb360e01b81526001600160a01b039091169163c395fcb391612a6d91339101613c3e565b60206040518083038186803b158015612a8557600080fd5b505afa158015612a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612abd9190613667565b612ae25760405162461bcd60e51b8152600401612ad990613ef3565b60405180910390fd5b6001600160a01b03831615612b0d57600080546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03841615612b3857600180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03821615612b6357600380546001600160a01b0319166001600160a01b0384161790555b6001600160a01b03811615612b8e57600280546001600160a01b0319166001600160a01b0383161790555b50505050565b6001546001600160a01b031681565b6000805460408051637616480b60e11b8152905160609384936001600160a01b03169263ec2c90169260048083019392829003018186803b158015612be757600080fd5b505afa158015612bfb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c2391908101906135db565b9050606081516001600160401b0381118015612c3e57600080fd5b50604051908082528060200260200182016040528015612c7857816020015b612c65613241565b815260200190600190039081612c5d5790505b50905060005b825181101561297d57612c8f613241565b612cab848381518110612c9e57fe5b6020026020010151612f20565b905080838381518110612cba57fe5b602090810291909101015250600101612c7e565b612cd661312f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81526040805180820182526008815267455448455245554d60c01b602080830191909152828401919091528151808301909252600382526208aa8960eb1b82820152606083019190915260129082015290565b612d466131be565b6001600160a01b03808316825260025460405163699af5ed60e11b81528492919091169063d335ebda90612d7e908490600401613c3e565b60206040518083038186803b158015612d9657600080fd5b505afa158015612daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dce9190613768565b826020018181525050806001600160a01b0316635eeb67106040518163ffffffff1660e01b815260040160206040518083038186803b158015612e1057600080fd5b505afa158015612e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e489190613768565b826040018181525050806001600160a01b031663a8b973a16040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec29190613768565b826060018181525050612f07816001600160a01b0316639ec5a8946040518163ffffffff1660e01b815260040160206040518083038186803b158015610bc457600080fd5b6080830152612f1583612212565b60a083015250919050565b612f28613241565b6000805460405163b034349360e01b81526001600160a01b039091169063b034349390612f59908690600401613c3e565b60206040518083038186803b158015612f7157600080fd5b505afa158015612f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fa9919061381c565b9050600080600080866001600160a01b031663314148e26040518163ffffffff1660e01b815260040160806040518083038186803b158015612fea57600080fd5b505afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302291906134e7565b9296509094509250905061303461312f565b61303d85610fe0565b6001600160a01b039098168752506001600160401b03948516602087015291841660408601529092166060840152501515608082015260a081019190915290565b604051806080016040528060006001600160a01b031681526020016060815260200160608152602001606081525090565b604080516101c081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152610160810161311561312f565b815260200161312261312f565b8152602001606081525090565b604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810191909152610140810161311561312f565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200161312261312f565b60405180606001604052806060815260200160608152602001600081525090565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b6040805160c08101825260008082526020820181905291810182905260608101829052608081019190915260a0810161327861312f565b905290565b6040518060e0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060c0016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200161327861312f565b8035611ca8816142c9565b80518015158114611ca857600080fd5b600082601f83011261332d578081fd5b81516001600160401b03811115613342578182fd5b613355601f8201601f191660200161424c565b915080825283602082850101111561336c57600080fd5b611c9081602084016020860161429d565b80516001600160401b0381168114611ca857600080fd5b6000602082840312156133a5578081fd5b8135611342816142c9565b6000602082840312156133c1578081fd5b8151611342816142c9565b600080604083850312156133de578081fd5b82356133e9816142c9565b915060208301356133f9816142c9565b809150509250929050565b600080600060608486031215613418578081fd5b8335613423816142c9565b92506020840135613433816142c9565b91506040840135613443816142c9565b809150509250925092565b60008060008060808587031215613463578081fd5b843561346e816142c9565b9350602085013561347e816142c9565b9250604085013561348e816142c9565b9150606085013561349e816142c9565b939692955090935050565b600080600080608085870312156134be578384fd5b84516134c9816142c9565b60208601516040870151606090970151919890975090945092505050565b600080600080608085870312156134fc578384fd5b8451613507816142c9565b9350613516866020870161337d565b9250613525866040870161337d565b9150613534866060870161330d565b905092959194509250565b60006020808385031215613551578182fd5b82356001600160401b03811115613566578283fd5b8301601f81018513613576578283fd5b803561358961358482614272565b61424c565b81815283810190838501858402850186018910156135a5578687fd5b8694505b838510156135cf576135bb8982613302565b8352600194909401939185019185016135a9565b50979650505050505050565b600060208083850312156135ed578182fd5b82516001600160401b03811115613602578283fd5b8301601f81018513613612578283fd5b805161362061358482614272565b818152838101908385018584028501860189101561363c578687fd5b8694505b838510156135cf578051613653816142c9565b835260019490940193918501918501613640565b600060208284031215613678578081fd5b8151611342816142e1565b600060208284031215613694578081fd5b81516001600160401b038111156136a9578182fd5b6127568482850161331d565b600080604083850312156136c7578182fd5b82516001600160401b038111156136dc578283fd5b6136e88582860161331d565b925050602083015190509250929050565b60008060006060848603121561370d578081fd5b8351613718816142ef565b6020850151909350613729816142e1565b6040850151909250613443816142e1565b6000806040838503121561374c578182fd5b8251613757816142ef565b60208401519092506133f9816142ef565b600060208284031215613779578081fd5b5051919050565b60008060408385031215613792578182fd5b50508035926020909101359150565b600080604083850312156137b3578182fd5b505080516020909101519092909150565b600080600080608085870312156137d9578182fd5b8451935060208501519250613525866040870161330d565b600080600060608486031215613805578081fd5b505081359360208301359350604090920135919050565b60006020828403121561382d578081fd5b611ca5838361337d565b60008060006060848603121561384b578081fd5b835161385681614304565b602085015190935061386781614304565b6040850151909250613443816142ef565b600060208284031215613889578081fd5b815160ff81168114611342578182fd5b6001600160a01b03169052565b60008282518085526020808601955080818302840101818601855b848110156138ef57601f198684030189526138dd838351613a00565b988401989250908301906001016138c1565b5090979650505050505050565b6000815180845260208085018081965082840281019150828601855b85811015613987578284038952815160c06139338251614291565b8652818701518787015260408083015190870152606080830151908701526080808301519087015260a09182015191860181905261397381870183613bda565b9a87019a9550505090840190600101613918565b5091979650505050505050565b6000815180845260208085019450808401835b838110156139c3578151875295820195908201906001016139a7565b509495945050505050565b15159052565b600081518084526139ec81602086016020860161429d565b601f01601f19169290920160200192915050565b6000815160608452613a1560608501826139d4565b905060208301518482036020860152613a2e82826139d4565b915050604083015160408501528091505092915050565b60006101c0613a55848451613899565b6020830151613a676020860182613899565b506040830151613a7a6040860182613c31565b506060830151613a8d6060860182613c31565b506080830151613aa06080860182613c24565b5060a0830151613ab360a0860182613c24565b5060c0830151613ac660c0860182613c24565b5060e0830151613ad960e0860182613c24565b5061010080840151613aed828701826139ce565b505061012080840151613b02828701826139ce565b505061014080840151613b17828701826139ce565b5050610160808401518282870152613b3183870182613bda565b925050506101808084015185830382870152613b4d8382613bda565b925050506101a08084015185830382870152613b6983826138a6565b9695505050505050565b600060018060a01b038251168352602082015160208401526040820151604084015260608201516060840152608082015160c06080850152613bb860c0850182613bda565b905060a083015184820360a0860152613bd182826138fc565b95945050505050565b600060018060a01b03825116835260208201516020840152604082015160806040850152613c0b60808501826139d4565b905060608301518482036060860152613bd182826139d4565b6001600160801b03169052565b6001600160401b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613cbf57603f19888603018452613cad858351613a00565b94509285019290850190600101613c91565b5092979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613cbf57603f19888603018452613d0d858351613b73565b94509285019290850190600101613cf1565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613dc657603f19898403018552815160c0613d628251614291565b8552818901516001600160401b039081168a870152888301518116898701526060808401519091169086015260808083015115159086015260a091820151918501819052613db281860183613bda565b968901969450505090860190600101613d43565b509098975050505050505050565b600060208252611ca560208301846138fc565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015613cbf57603f19888603018452613e28858351613bda565b94509285019290850190600101613e0c565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015613dc657888303603f19018552815180516001600160a01b0316845287810151608089860181905290613e9782870182613994565b9150508782015185820389870152613eaf8282613994565b91505060608083015192508582038187015250613ecc8183613994565b968901969450505090860190600101613e5e565b600060208252611ca560208301846139d4565b6020808252818101527f4d49534f48656c7065723a2053656e646572206d7573742062652041646d696e604082015260600190565b600060208252613f3c602083018451613899565b6020830151613f4e6040840182613899565b506040830151613f616060840182613c31565b506060830151613f746080840182613c31565b506080830151613f8760a0840182613c24565b5060a083015160c083015260c083015160e083015260e0830151610100613fb0818501836139ce565b8401519050610120613fc4848201836139ce565b8401519050610140613fd8848201836139ce565b808501519150506101a06101608181860152613ff86101c0860184613bda565b9250808601519050601f196101808187860301818801526140198584613bda565b908801518782039092018488015293509050613b6983826138a6565b600060208252614049602083018451613899565b602083015161405b6040840182613899565b50604083015161406e6060840182613c24565b5060608301516140816080840182613c24565b50608083015161409460a0840182613c24565b5060a08301516140a760c0840182613c24565b5060c08301516140ba60e0840182613c31565b5060e08301516101006140cf81850183613c31565b84015190506101206140e3848201836139ce565b84015190506101406140f7848201836139ce565b840151905061016061410b848201836139ce565b808501519150506101c0610180818186015261412b6101e0860184613bda565b9250808601519050601f196101a08187860301818801526140198584613bda565b600060208252611ca56020830184613a45565b6000604080835261417281840186613b73565b838103602085810191909152855180835286820192820190855b81811015613dc65784516141a08151614291565b845280850151858501528681015187850152606080820151908501526080808201519085015260a0808201519085015260c090810151908401529383019360e09092019160010161418c565b600060208252611ca56020830184613bda565b81518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6040518181016001600160401b038111828210171561426a57600080fd5b604052919050565b60006001600160401b03821115614287578081fd5b5060209081020190565b6001600160a01b031690565b60005b838110156142b85781810151838201526020016142a0565b83811115612b8e5750506000910152565b6001600160a01b03811681146142de57600080fd5b50565b80151581146142de57600080fd5b6001600160801b03811681146142de57600080fd5b6001600160401b03811681146142de57600080fdfea26469706673582212204aa52e4045db807d6c8e3b4962bfb4845939a1aab463b4f5e85c35adb8e456c364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accessControls()": {
        "notice": "Responsible for access rights to the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9672,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "market",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMisoMarketFactory)10623"
      },
      {
        "astId": 9674,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMisoTokenFactory)9545"
      },
      {
        "astId": 9676,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "farmFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMisoFarmFactory)9777"
      },
      {
        "astId": 9678,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "launcher",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9681,
        "contract": "contracts/Helper/MISOHelper.sol:MISOHelper",
        "label": "accessControls",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(MISOAccessControls)583"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoFarmFactory)9777": {
        "encoding": "inplace",
        "label": "contract IMisoFarmFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoMarketFactory)10623": {
        "encoding": "inplace",
        "label": "contract IMisoMarketFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMisoTokenFactory)9545": {
        "encoding": "inplace",
        "label": "contract IMisoTokenFactory",
        "numberOfBytes": "20"
      },
      "t_contract(MISOAccessControls)583": {
        "encoding": "inplace",
        "label": "contract MISOAccessControls",
        "numberOfBytes": "20"
      }
    }
  }
}