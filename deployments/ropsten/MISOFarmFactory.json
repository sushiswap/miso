{
  "address": "0xc579D8B4541e5b1092eeCC1Fc027680259DE59cb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "farmTemplate",
          "type": "address"
        }
      ],
      "name": "FarmCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFarm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "name": "FarmTemplateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "farm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "name": "FarmTemplateRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MisoInitFarmFactory",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FARM_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract MISOAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_template",
          "type": "address"
        }
      ],
      "name": "addFarmTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_integratorFeeAccount",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createFarm",
      "outputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_integratorFeeAccount",
          "type": "address"
        }
      ],
      "name": "deployFarm",
      "outputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "farmInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "farms",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_farmTemplate",
          "type": "uint256"
        }
      ],
      "name": "getFarmTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFarms",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farmTemplate",
          "type": "address"
        }
      ],
      "name": "getTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasFarmMinterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_misoDiv",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_integratorFeePct",
          "type": "uint256"
        }
      ],
      "name": "initMISOFarmFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "integratorFeePct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "misoDiv",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfFarms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        }
      ],
      "name": "removeFarmTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTemplateId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_divaddr",
          "type": "address"
        }
      ],
      "name": "setDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setIntegratorFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "setLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x793d608bf0a24a431fb1526b8eb669e9c96308acb1ae40cf881829ea8c35e359",
  "receipt": {
    "to": null,
    "from": "0x5DB5bEdffa57dc3DcEF5D0201eD747E4BC114650",
    "contractAddress": "0xc579D8B4541e5b1092eeCC1Fc027680259DE59cb",
    "transactionIndex": 1,
    "gasUsed": "1369176",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6b1961ae08e1154fe379722fe4c607fc298049af72829b1df562ce0496e5a117",
    "transactionHash": "0x793d608bf0a24a431fb1526b8eb669e9c96308acb1ae40cf881829ea8c35e359",
    "logs": [],
    "blockNumber": 11254637,
    "cumulativeGasUsed": "3978780",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1fb438077347298e0d57961a6b349fd4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farmTemplate\",\"type\":\"address\"}],\"name\":\"FarmCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFarm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"FarmTemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"FarmTemplateRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MisoInitFarmFactory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FARM_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract MISOAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"addFarmTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_integratorFeeAccount\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_integratorFeeAccount\",\"type\":\"address\"}],\"name\":\"deployFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farmInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmTemplate\",\"type\":\"uint256\"}],\"name\":\"getFarmTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFarms\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmTemplate\",\"type\":\"address\"}],\"name\":\"getTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasFarmMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_misoDiv\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_integratorFeePct\",\"type\":\"uint256\"}],\"name\":\"initMISOFarmFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"integratorFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"misoDiv\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfFarms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"removeFarmTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"setCurrentTemplateId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_divaddr\",\"type\":\"address\"}],\"name\":\"setDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setIntegratorFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addFarmTemplate(address)\":{\"details\":\"Should have operator access.\",\"params\":{\"_template\":\"Farm template address to create a farm.\"}},\"createFarm(uint256,address,bytes)\":{\"details\":\"Initializes farm with the parameters passed.\",\"params\":{\"_data\":\"Data to be passed to the farm contract for init.\",\"_integratorFeeAccount\":\"Address to pay the fee to.\",\"_templateId\":\"Template id of the farm to create.\"},\"returns\":{\"farm\":\"address.\"}},\"deployFarm(uint256,address)\":{\"params\":{\"_integratorFeeAccount\":\"Address to pay the fee to.\",\"_templateId\":\"Template id of the farm to create.\"},\"returns\":{\"farm\":\"address.\"}},\"getFarmTemplate(uint256)\":{\"params\":{\"_farmTemplate\":\"Farm template ID.\"},\"returns\":{\"_0\":\"Address of the required template ID.\"}},\"getFarms()\":{\"returns\":{\"_0\":\"created farms.\"}},\"getTemplateId(address)\":{\"params\":{\"_farmTemplate\":\"Farm template address.\"},\"returns\":{\"_0\":\"ID of the required template address.\"}},\"hasFarmMinterRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"initMISOFarmFactory(address,address,uint256,uint256)\":{\"details\":\"Can only be initialized once\",\"params\":{\"_accessControls\":\"Sets address to get the access controls from.\",\"_integratorFeePct\":\"Fee to UI integration\",\"_minimumFee\":\"Sets a minimum fee for creating farm in the factory.\",\"_misoDiv\":\"Sets address to send the dividends.\"}},\"numberOfFarms()\":{\"returns\":{\"_0\":\"Farms count.\"}},\"removeFarmTemplate(uint256)\":{\"details\":\"Should have operator access.\",\"params\":{\"_templateId\":\"Refers to template ID that is to be deleted.\"}},\"setCurrentTemplateId(uint256,uint256)\":{\"params\":{\"_templateId\":\"The ID of the current template for that type\",\"_templateType\":\"Type of template.\"}},\"setDividends(address)\":{\"params\":{\"_divaddr\":\"Dividend address.\"}},\"setIntegratorFeePct(uint256)\":{\"params\":{\"_amount\":\"Percentage amount.\"}},\"setLocked(bool)\":{\"params\":{\"_locked\":\"bool.\"}},\"setMinimumFee(uint256)\":{\"params\":{\"_amount\":\"Fee amount.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FarmCreated(address,address,address)\":{\"notice\":\"Event emitted when a farm is created using template id.\"},\"FarmTemplateAdded(address,uint256)\":{\"notice\":\"Event emitted when farm template is added to factory.\"},\"FarmTemplateRemoved(address,uint256)\":{\"notice\":\"Event emitted when farm template is removed.\"},\"MisoInitFarmFactory(address)\":{\"notice\":\"Event emitted when first initializing the Miso Farm Factory.\"}},\"kind\":\"user\",\"methods\":{\"accessControls()\":{\"notice\":\"Responsible for access rights to the contract.\"},\"addFarmTemplate(address)\":{\"notice\":\"Function to add a farm template to create through factory.\"},\"createFarm(uint256,address,bytes)\":{\"notice\":\"Creates a farm corresponding to the _templateId.\"},\"deployFarm(uint256,address)\":{\"notice\":\"Deploys a farm corresponding to the _templateId and transfers fees.\"},\"farmInfo(address)\":{\"notice\":\"Mapping from auction created through this contract to Auction struct.\"},\"farmTemplateId()\":{\"notice\":\"Template id to track respective farm template.\"},\"farms(uint256)\":{\"notice\":\"Farms created using the factory.\"},\"getFarmTemplate(uint256)\":{\"notice\":\"Get the address based on template ID.\"},\"getFarms()\":{\"notice\":\"Get all farm created in the factory.\"},\"getTemplateId(address)\":{\"notice\":\"Get the ID based on template address.\"},\"hasFarmMinterRole(address)\":{\"notice\":\"Used to check whether an address has the minter role\"},\"initMISOFarmFactory(address,address,uint256,uint256)\":{\"notice\":\"Single gateway to initialize the MISO Farm factory with proper address.\"},\"locked()\":{\"notice\":\"Contract locked status. If locked, only minters can deploy\"},\"minimumFee()\":{\"notice\":\"Minimum fee to create a farm through the factory.\"},\"misoDiv()\":{\"notice\":\"Any MISO dividends collected are sent here.\"},\"numberOfFarms()\":{\"notice\":\"Get the total number of farms in the factory.\"},\"removeFarmTemplate(uint256)\":{\"notice\":\"Function to remove a farm template.\"},\"setCurrentTemplateId(uint256,uint256)\":{\"notice\":\"Sets the current template ID for any type.\"},\"setDividends(address)\":{\"notice\":\"Sets dividend address.\"},\"setIntegratorFeePct(uint256)\":{\"notice\":\"Sets integrator fee percentage.\"},\"setLocked(bool)\":{\"notice\":\"Sets the factory to be locked or unlocked.\"},\"setMinimumFee(uint256)\":{\"notice\":\"Sets the minimum fee.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MISOFarmFactory.sol\":\"MISOFarmFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/MISOAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./MISOAdminAccess.sol\\\";\\n\\n/**\\n * @notice Access Controls\\n * @author Attr: BlockRocket.tech\\n */\\ncontract MISOAccessControls is MISOAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdb3765654240248cec4a2e8bb2cd33164dbdd631118833eea52bd6199cc39c13\",\"license\":\"GPL-3.0-only\"},\"contracts/Access/MISOAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\n\\ncontract MISOAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x90b919dd0f8bb50174e958858fe7d025e6b9a096ca5aa5516f812342af398262\",\"license\":\"GPL-3.0-only\"},\"contracts/MISOFarmFactory.sol\":{\"content\":\"pragma solidity 0.6.12;\\n                                                                                                                                                                                                                    \\n//----------------------------------------------------------------------------------\\n//    I n s t a n t\\n//\\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.  \\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'  \\n//\\n//----------------------------------------------------------------------------------\\n//\\n// Chef Gonpachi's MISO Farm Factory\\n//\\n// A factory to conveniently deploy your own token farming contracts\\n//\\n// Inspired by Bokky's EtherVendingMachince.io\\n// https://github.com/bokkypoobah/FixedSupplyTokenFactory\\n// \\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// The above copyright notice and this permission notice shall be included \\n// in all copies or substantial portions of the Software.\\n//\\n// Made for Sushi.com \\n// \\n// Enjoy. (c) Chef Gonpachi 2021 \\n// <https://github.com/chefgonpachi/MISO/>\\n//\\n// ---------------------------------------------------------------------\\n// SPDX-License-Identifier: GPL-3.0                        \\n// ---------------------------------------------------------------------\\n\\n\\nimport \\\"./Utils/CloneFactory.sol\\\";\\nimport \\\"./interfaces/IMisoFarm.sol\\\";\\nimport \\\"./Access/MISOAccessControls.sol\\\";\\n\\ncontract MISOFarmFactory is CloneFactory {\\n\\n    /// @notice Responsible for access rights to the contract.\\n    MISOAccessControls public accessControls;\\n    bytes32 public constant FARM_MINTER_ROLE = keccak256(\\\"FARM_MINTER_ROLE\\\");\\n\\n    /// @notice Whether farm factory has been initialized or not.\\n    bool private initialised;\\n    /// @notice Contract locked status. If locked, only minters can deploy\\n    bool public locked;\\n\\n    /// @notice Struct to track Farm template.\\n    struct Farm {\\n        bool exists;\\n        uint256 templateId;\\n        uint256 index;\\n    }\\n\\n    /// @notice Mapping from auction created through this contract to Auction struct.\\n    mapping(address => Farm) public farmInfo;\\n\\n    /// @notice Farms created using the factory.\\n    address[] public farms;\\n\\n    /// @notice Template id to track respective farm template.\\n    uint256 public farmTemplateId;\\n\\n    /// @notice Mapping from template id to farm template address.\\n    mapping(uint256 => address) private farmTemplates;\\n\\n    /// @notice mapping from farm template address to farm template id\\n    mapping(address => uint256) private farmTemplateToId;\\n\\n    // /// @notice mapping from template type to template id\\n    mapping(uint256 => uint256) public currentTemplateId;\\n\\n    /// @notice Minimum fee to create a farm through the factory.\\n    uint256 public minimumFee;\\n    uint256 public integratorFeePct;\\n\\n    /// @notice Any MISO dividends collected are sent here.\\n    address payable public misoDiv;\\n\\n    /// @notice Event emitted when first initializing the Miso Farm Factory.\\n    event MisoInitFarmFactory(address sender);\\n\\n    /// @notice Event emitted when a farm is created using template id.\\n    event FarmCreated(address indexed owner, address indexed addr, address farmTemplate);\\n\\n    /// @notice Event emitted when farm template is added to factory.\\n    event FarmTemplateAdded(address newFarm, uint256 templateId);\\n\\n    /// @notice Event emitted when farm template is removed.\\n    event FarmTemplateRemoved(address farm, uint256 templateId);\\n\\n    /**\\n     * @notice Single gateway to initialize the MISO Farm factory with proper address.\\n     * @dev Can only be initialized once\\n     * @param _accessControls Sets address to get the access controls from.\\n     * @param _misoDiv Sets address to send the dividends.\\n     * @param _minimumFee Sets a minimum fee for creating farm in the factory.\\n     * @param _integratorFeePct Fee to UI integration\\n     */\\n    function initMISOFarmFactory(\\n        address _accessControls,\\n        address payable _misoDiv,\\n        uint256 _minimumFee,\\n        uint256 _integratorFeePct\\n    )\\n        external\\n    {\\n        /// @dev Maybe missing require message?\\n        require(!initialised);\\n        require(_misoDiv != address(0));\\n        locked = true;\\n        initialised = true;\\n        misoDiv = _misoDiv;\\n        minimumFee = _minimumFee;\\n        integratorFeePct = _integratorFeePct;\\n        accessControls = MISOAccessControls(_accessControls);\\n        emit MisoInitFarmFactory(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum fee.\\n     * @param _amount Fee amount.\\n     */\\n    function setMinimumFee(uint256 _amount) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be operator\\\"\\n        );\\n        minimumFee = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets integrator fee percentage.\\n     * @param _amount Percentage amount.\\n     */\\n    function setIntegratorFeePct(uint256 _amount) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be operator\\\"\\n        );\\n        /// @dev this is out of 1000, ie 25% = 250\\n        require(\\n            _amount <= 1000, \\n            \\\"MISOFarmFactory: Range is from 0 to 1000\\\"\\n        );\\n        integratorFeePct = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets dividend address.\\n     * @param _divaddr Dividend address.\\n     */\\n    function setDividends(address payable _divaddr) external  {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be operator\\\"\\n        );\\n        require(_divaddr != address(0));\\n        misoDiv = _divaddr;\\n    }\\n\\n    /**\\n     * @notice Sets the factory to be locked or unlocked.\\n     * @param _locked bool.\\n     */\\n    function setLocked(bool _locked) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be admin\\\"\\n        );\\n        locked = _locked;\\n    }\\n\\n\\n    /**\\n     * @notice Sets the current template ID for any type.\\n     * @param _templateType Type of template.\\n     * @param _templateId The ID of the current template for that type\\n     */\\n    function setCurrentTemplateId(uint256 _templateType, uint256 _templateId) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be admin\\\"\\n        );\\n        currentTemplateId[_templateType] = _templateId;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasFarmMinterRole(address _address) public view returns (bool) {\\n        return accessControls.hasRole(FARM_MINTER_ROLE, _address);\\n    }\\n\\n\\n\\n    /**\\n     * @notice Deploys a farm corresponding to the _templateId and transfers fees.\\n     * @param _templateId Template id of the farm to create.\\n     * @param _integratorFeeAccount Address to pay the fee to.\\n     * @return farm address.\\n     */\\n    function deployFarm(\\n        uint256 _templateId,\\n        address payable _integratorFeeAccount\\n    )\\n        public payable returns (address farm)\\n    {\\n        /// @dev If the contract is locked, only admin and minters can deploy. \\n        if (locked) {\\n            require(accessControls.hasAdminRole(msg.sender) \\n                    || accessControls.hasMinterRole(msg.sender)\\n                    || hasFarmMinterRole(msg.sender),\\n                \\\"MISOFarmFactory: Sender must be minter if locked\\\"\\n            );\\n        }\\n\\n        require(msg.value >= minimumFee, \\\"MISOFarmFactory: Failed to transfer minimumFee\\\");\\n        require(farmTemplates[_templateId] != address(0));\\n        uint256 integratorFee = 0;\\n        uint256 misoFee = msg.value;\\n        if (_integratorFeeAccount != address(0) && _integratorFeeAccount != misoDiv) {\\n            integratorFee = misoFee * integratorFeePct / 1000;\\n            misoFee = misoFee - integratorFee;\\n        }\\n        farm = createClone(farmTemplates[_templateId]);\\n        farmInfo[address(farm)] = Farm(true, _templateId, farms.length);\\n        farms.push(address(farm));\\n        emit FarmCreated(msg.sender, address(farm), farmTemplates[_templateId]);\\n        if (misoFee > 0) {\\n            misoDiv.transfer(misoFee);\\n        }\\n        if (integratorFee > 0) {\\n            _integratorFeeAccount.transfer(integratorFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a farm corresponding to the _templateId.\\n     * @dev Initializes farm with the parameters passed.\\n     * @param _templateId Template id of the farm to create.\\n     * @param _integratorFeeAccount Address to pay the fee to.\\n     * @param _data Data to be passed to the farm contract for init.\\n     * @return farm address.\\n     */\\n    function createFarm(\\n        uint256 _templateId,\\n        address payable _integratorFeeAccount,\\n        bytes calldata _data\\n    )\\n        external payable returns (address farm)\\n    {\\n        farm = deployFarm(_templateId, _integratorFeeAccount);\\n        IMisoFarm(farm).initFarm(_data);\\n    }\\n\\n    /**\\n     * @notice Function to add a farm template to create through factory.\\n     * @dev Should have operator access.\\n     * @param _template Farm template address to create a farm.\\n     */\\n    function addFarmTemplate(address _template) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be operator\\\"\\n        );\\n        require(farmTemplateToId[_template] == 0, \\\"MISOFarmFactory: Template already added\\\");\\n        uint256 templateType = IMisoFarm(_template).farmTemplate();\\n        require(templateType > 0, \\\"MISOFarmFactory: Incorrect template code \\\");\\n        farmTemplateId++;\\n        farmTemplates[farmTemplateId] = _template;\\n        farmTemplateToId[_template] = farmTemplateId;\\n        currentTemplateId[templateType] = farmTemplateId;\\n        emit FarmTemplateAdded(_template, farmTemplateId);\\n\\n    }\\n\\n     /**\\n     * @notice Function to remove a farm template.\\n     * @dev Should have operator access.\\n     * @param _templateId Refers to template ID that is to be deleted.\\n     */\\n    function removeFarmTemplate(uint256 _templateId) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOFarmFactory: Sender must be operator\\\"\\n        );\\n        require(farmTemplates[_templateId] != address(0));\\n        address template = farmTemplates[_templateId];\\n        farmTemplates[_templateId] = address(0);\\n        delete farmTemplateToId[template];\\n        emit FarmTemplateRemoved(template, _templateId);\\n    }\\n\\n    /**\\n     * @notice Get the address based on template ID.\\n     * @param _farmTemplate Farm template ID.\\n     * @return Address of the required template ID.\\n     */\\n    function getFarmTemplate(uint256 _farmTemplate) external view returns (address) {\\n        return farmTemplates[_farmTemplate];\\n    }\\n\\n    /**\\n     * @notice Get the ID based on template address.\\n     * @param _farmTemplate Farm template address.\\n     * @return ID of the required template address.\\n     */\\n    function getTemplateId(address _farmTemplate) external view returns (uint256) {\\n        return farmTemplateToId[_farmTemplate];\\n    }\\n\\n    /**\\n     * @notice Get the total number of farms in the factory.\\n     * @return Farms count.\\n     */\\n    function numberOfFarms() external view returns (uint256) {\\n        return farms.length;\\n    }\\n\\n    /**\\n     * @notice Get all farm created in the factory.\\n     * @return created farms.\\n     */\\n    function getFarms() external view returns(address[] memory) {\\n        return farms;\\n    }\\n}\\n\",\"keccak256\":\"0xc8510cfe6edf0485a8a656a1c5bd1c0b227e9d560e74f1c9cd20b9d73125c485\",\"license\":\"GPL-3.0\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6711f5cfe992294baa43dd8d1d39f2caa1f62761d65abeb3f2a405833da794f2\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x408ed1e8d180f17597080e993fea24a26ec262dd56ee20dfbdcf511d261387d4\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7a5437ee09401a3d1ec98f126470362f9848afbf521510d6bfae61d7b42a8fb7\"},\"contracts/Utils/CloneFactory.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// CloneFactory.sol\\n// From\\n// https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n// ----------------------------------------------------------------------------\\n\\n/*\\nThe MIT License (MIT)\\nCopyright (c) 2018 Murray Software, LLC.\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n//solhint-disable max-line-length\\n//solhint-disable no-inline-assembly\\n\\ncontract CloneFactory {\\n\\n  function createClone(address target) internal returns (address result) {\\n    bytes20 targetBytes = bytes20(target);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      result := create(0, clone, 0x37)\\n    }\\n  }\\n\\n  function isClone(address target, address query) internal view returns (bool result) {\\n    bytes20 targetBytes = bytes20(target);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\n      mstore(add(clone, 0xa), targetBytes)\\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\n      let other := add(clone, 0x40)\\n      extcodecopy(query, other, 0, 0x2d)\\n      result := and(\\n        eq(mload(clone), mload(other)),\\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n      )\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa1d5bbba3b35b50c5044a9f5989914613db64466fd82b17b39ba323e493d33e3\"},\"contracts/interfaces/IMisoFarm.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IMisoFarm {\\n\\n    function initFarm(\\n        bytes calldata data\\n    ) external;\\n    function farmTemplate() external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x351ea884d1b81af9c8ffd4d2591f065357b75c740ae75ca3f47e88448510a249\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117cf806100206000396000f3fe6080604052600436106101665760003560e01c80637da470ea116100d1578063cf3090121161008a578063e6d176b511610064578063e6d176b514610534578063eabcd0a4146105b9578063ed88fd0d146105ce578063f54a9bca1461060157610166565b8063cf309012146104a5578063d0c73d26146104ce578063d335ebda1461050157610166565b80637da470ea146103895780638f5185e8146103b35780639dc4ac8a146103c85780639e5940cc1461042d5780639e9188ea1461045d578063c9907b081461049057610166565b80633f1f44b0116101235780633f1f44b01461027c5780634520ca75146102a657806351cc21ac146102bb57806362f11797146102e55780636cbfd71f1461032e578063748365ef1461037457610166565b8063182a75061461016b5780631a7626e7146101975780631f2570c5146101be578063211e28b6146101d35780632915cbec146101ff5780632ed4f57814610252575b600080fd5b34801561017757600080fd5b506101956004803603602081101561018e57600080fd5b503561062d565b005b3480156101a357600080fd5b506101ac6106e4565b60408051918252519081900360200190f35b3480156101ca57600080fd5b506101ac6106ea565b3480156101df57600080fd5b50610195600480360360208110156101f657600080fd5b503515156106f0565b34801561020b57600080fd5b506102326004803603602081101561022257600080fd5b50356001600160a01b03166107c0565b604080519315158452602084019290925282820152519081900360600190f35b34801561025e57600080fd5b506101ac6004803603602081101561027557600080fd5b50356107e6565b34801561028857600080fd5b506101956004803603602081101561029f57600080fd5b50356107f8565b3480156102b257600080fd5b506101ac6108f0565b3480156102c757600080fd5b50610195600480360360208110156102de57600080fd5b50356108f6565b3480156102f157600080fd5b506101956004803603608081101561030857600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610aba565b34801561033a57600080fd5b506103586004803603602081101561035157600080fd5b5035610b70565b604080516001600160a01b039092168252519081900360200190f35b34801561038057600080fd5b50610358610b8b565b34801561039557600080fd5b50610358600480360360208110156103ac57600080fd5b5035610b9a565b3480156103bf57600080fd5b506101ac610bc1565b3480156103d457600080fd5b506103dd610bc7565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610419578181015183820152602001610401565b505050509050019250505060405180910390f35b34801561043957600080fd5b506101956004803603604081101561045057600080fd5b5080359060200135610c29565b34801561046957600080fd5b506101956004803603602081101561048057600080fd5b50356001600160a01b0316610d6b565b34801561049c57600080fd5b50610358610e52565b3480156104b157600080fd5b506104ba610e61565b604080519115158252519081900360200190f35b3480156104da57600080fd5b50610195600480360360208110156104f157600080fd5b50356001600160a01b0316610e71565b34801561050d57600080fd5b506101ac6004803603602081101561052457600080fd5b50356001600160a01b031661112b565b6103586004803603606081101561054a57600080fd5b8135916001600160a01b036020820135169181019060608101604082013564010000000081111561057a57600080fd5b82018360208201111561058c57600080fd5b803590602001918460018302840111640100000000831117156105ae57600080fd5b509092509050611146565b3480156105c557600080fd5b506101ac6111e8565b3480156105da57600080fd5b506104ba600480360360208110156105f157600080fd5b50356001600160a01b031661120c565b6103586004803603604081101561061757600080fd5b50803590602001356001600160a01b03166112b2565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b50516106df5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b600755565b60075481565b60035481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d602081101561076557600080fd5b50516107a25760405162461bcd60e51b815260040180806020018281038252602581526020018061174d6025913960400191505060405180910390fd5b60008054911515600160a81b0260ff60a81b19909216919091179055565b600160208190526000918252604090912080549181015460029091015460ff9092169183565b60066020526000908152604090205481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d602081101561086d57600080fd5b50516108aa5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6103e88111156108eb5760405162461bcd60e51b81526004018080602001828103825260288152602001806117256028913960400191505060405180910390fd5b600855565b60085481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d602081101561096b57600080fd5b5051806109eb575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d60208110156109e857600080fd5b50515b610a265760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b0316610a4757600080fd5b600081815260046020908152604080832080546001600160a01b031981169091556001600160a01b03168084526005835281842093909355805183815291820184905280517f628bd92bbb6002112d3590cfe31c722f97503016b138490288be605a074d91e49281900390910190a15050565b600054600160a01b900460ff1615610ad157600080fd5b6001600160a01b038316610ae457600080fd5b60008054600980546001600160a01b038088166001600160a01b0319928316179092556007869055600885905590871660ff60a01b1960ff60a81b19909316600160a81b1792909216600160a01b17161790556040805133815290517f3f4578db4b3ac464602aae2d3348528a51ef25128a09f4860119a11dc301ec459181900360200190a150505050565b6000908152600460205260409020546001600160a01b031690565b6000546001600160a01b031681565b60028181548110610ba757fe5b6000918252602090912001546001600160a01b0316905081565b60025490565b60606002805480602002602001604051908101604052809291908181526020018280548015610c1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c01575b5050505050905090565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d6020811015610c9e57600080fd5b505180610d1e575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d6020811015610d1b57600080fd5b50515b610d595760405162461bcd60e51b815260040180806020018281038252602581526020018061174d6025913960400191505060405180910390fd5b60009182526006602052604090912055565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d6020811015610de057600080fd5b5051610e1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6001600160a01b038116610e3057600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b600054600160a81b900460ff1681565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d6020811015610ee657600080fd5b505180610f66575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d6020811015610f6357600080fd5b50515b610fa15760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6001600160a01b03811660009081526005602052604090205415610ff65760405162461bcd60e51b81526004018080602001828103825260278152602001806116fe6027913960400191505060405180910390fd5b6000816001600160a01b0316632c77f6566040518163ffffffff1660e01b815260040160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d602081101561105b57600080fd5b505190508061109b5760405162461bcd60e51b81526004018080602001828103825260298152602001806116776029913960400191505060405180910390fd5b60038054600101808255600090815260046020908152604080832080546001600160a01b0319166001600160a01b038816908117909155935484845260058352818420819055858452600683529281902083905580519384529083019190915280517fb397ea829c3dad5af04b9f5976e06a3a011d99ca1caa5b41515196c894a0be5b9281900390910190a15050565b6001600160a01b031660009081526005602052604090205490565b600061115285856112b2565b60405163824fa82160e01b8152602060048201908152602482018590529192506001600160a01b0383169163824fa82191869186918190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b50505050949350505050565b7f53570b66c9642abfc1b1b74ee3dff9b6aeb7638291a5983f7881f58149d86cd781565b6000805460408051632474521560e21b81527f53570b66c9642abfc1b1b74ee3dff9b6aeb7638291a5983f7881f58149d86cd760048201526001600160a01b038581166024830152915191909216916391d14854916044808301926020929190829003018186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d60208110156112aa57600080fd5b505192915050565b60008054600160a81b900460ff1615611404576000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051806113ba57506000546040805163099db01760e01b815233600482015290516001600160a01b039092169163099db01791602480820192602092909190829003018186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b50515b806113c957506113c93361120c565b6114045760405162461bcd60e51b81526004018080602001828103825260308152602001806116ce6030913960400191505060405180910390fd5b6007543410156114455760405162461bcd60e51b815260040180806020018281038252602e8152602001806116a0602e913960400191505060405180910390fd5b6000838152600460205260409020546001600160a01b031661146657600080fd5b6000346001600160a01b0384161580159061148f57506009546001600160a01b03858116911614155b156114aa576103e86008548202816114a357fe5b0491508190035b6000858152600460205260409020546114cb906001600160a01b0316611624565b60408051606081018252600180825260208083018a8152600280548587019081526001600160a01b0388811660008181528787528981209851895460ff191690151517895594518888015591519683019690965581549485019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90930180546001600160a01b031916841790558a8152600482528490205484519316835292519396509233927f6e766a2e8ac6e7ecbc0956ba73fdf9e546312daf00a15a6817b8ca66159bd7ab928290030190a380156115de576009546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156115dc573d6000803e3d6000fd5b505b811561161c576040516001600160a01b0385169083156108fc029084906000818181858888f1935050505015801561161a573d6000803e3d6000fd5b505b505092915050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f094935050505056fe4d49534f4661726d466163746f72793a20496e636f72726563742074656d706c61746520636f6465204d49534f4661726d466163746f72793a204661696c656420746f207472616e73666572206d696e696d756d4665654d49534f4661726d466163746f72793a2053656e646572206d757374206265206d696e746572206966206c6f636b65644d49534f4661726d466163746f72793a2054656d706c61746520616c72656164792061646465644d49534f4661726d466163746f72793a2052616e67652069732066726f6d203020746f20313030304d49534f4661726d466163746f72793a2053656e646572206d7573742062652061646d696e4d49534f4661726d466163746f72793a2053656e646572206d757374206265206f70657261746f72a26469706673582212207c7c77fd0d289051428c90faa5bdaaa6203176281e0edcfab95b85f4374ac86064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c80637da470ea116100d1578063cf3090121161008a578063e6d176b511610064578063e6d176b514610534578063eabcd0a4146105b9578063ed88fd0d146105ce578063f54a9bca1461060157610166565b8063cf309012146104a5578063d0c73d26146104ce578063d335ebda1461050157610166565b80637da470ea146103895780638f5185e8146103b35780639dc4ac8a146103c85780639e5940cc1461042d5780639e9188ea1461045d578063c9907b081461049057610166565b80633f1f44b0116101235780633f1f44b01461027c5780634520ca75146102a657806351cc21ac146102bb57806362f11797146102e55780636cbfd71f1461032e578063748365ef1461037457610166565b8063182a75061461016b5780631a7626e7146101975780631f2570c5146101be578063211e28b6146101d35780632915cbec146101ff5780632ed4f57814610252575b600080fd5b34801561017757600080fd5b506101956004803603602081101561018e57600080fd5b503561062d565b005b3480156101a357600080fd5b506101ac6106e4565b60408051918252519081900360200190f35b3480156101ca57600080fd5b506101ac6106ea565b3480156101df57600080fd5b50610195600480360360208110156101f657600080fd5b503515156106f0565b34801561020b57600080fd5b506102326004803603602081101561022257600080fd5b50356001600160a01b03166107c0565b604080519315158452602084019290925282820152519081900360600190f35b34801561025e57600080fd5b506101ac6004803603602081101561027557600080fd5b50356107e6565b34801561028857600080fd5b506101956004803603602081101561029f57600080fd5b50356107f8565b3480156102b257600080fd5b506101ac6108f0565b3480156102c757600080fd5b50610195600480360360208110156102de57600080fd5b50356108f6565b3480156102f157600080fd5b506101956004803603608081101561030857600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610aba565b34801561033a57600080fd5b506103586004803603602081101561035157600080fd5b5035610b70565b604080516001600160a01b039092168252519081900360200190f35b34801561038057600080fd5b50610358610b8b565b34801561039557600080fd5b50610358600480360360208110156103ac57600080fd5b5035610b9a565b3480156103bf57600080fd5b506101ac610bc1565b3480156103d457600080fd5b506103dd610bc7565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610419578181015183820152602001610401565b505050509050019250505060405180910390f35b34801561043957600080fd5b506101956004803603604081101561045057600080fd5b5080359060200135610c29565b34801561046957600080fd5b506101956004803603602081101561048057600080fd5b50356001600160a01b0316610d6b565b34801561049c57600080fd5b50610358610e52565b3480156104b157600080fd5b506104ba610e61565b604080519115158252519081900360200190f35b3480156104da57600080fd5b50610195600480360360208110156104f157600080fd5b50356001600160a01b0316610e71565b34801561050d57600080fd5b506101ac6004803603602081101561052457600080fd5b50356001600160a01b031661112b565b6103586004803603606081101561054a57600080fd5b8135916001600160a01b036020820135169181019060608101604082013564010000000081111561057a57600080fd5b82018360208201111561058c57600080fd5b803590602001918460018302840111640100000000831117156105ae57600080fd5b509092509050611146565b3480156105c557600080fd5b506101ac6111e8565b3480156105da57600080fd5b506104ba600480360360208110156105f157600080fd5b50356001600160a01b031661120c565b6103586004803603604081101561061757600080fd5b50803590602001356001600160a01b03166112b2565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561067857600080fd5b505afa15801561068c573d6000803e3d6000fd5b505050506040513d60208110156106a257600080fd5b50516106df5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b600755565b60075481565b60035481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561073b57600080fd5b505afa15801561074f573d6000803e3d6000fd5b505050506040513d602081101561076557600080fd5b50516107a25760405162461bcd60e51b815260040180806020018281038252602581526020018061174d6025913960400191505060405180910390fd5b60008054911515600160a81b0260ff60a81b19909216919091179055565b600160208190526000918252604090912080549181015460029091015460ff9092169183565b60066020526000908152604090205481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561084357600080fd5b505afa158015610857573d6000803e3d6000fd5b505050506040513d602081101561086d57600080fd5b50516108aa5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6103e88111156108eb5760405162461bcd60e51b81526004018080602001828103825260288152602001806117256028913960400191505060405180910390fd5b600855565b60085481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561094157600080fd5b505afa158015610955573d6000803e3d6000fd5b505050506040513d602081101561096b57600080fd5b5051806109eb575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d60208110156109e857600080fd5b50515b610a265760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b0316610a4757600080fd5b600081815260046020908152604080832080546001600160a01b031981169091556001600160a01b03168084526005835281842093909355805183815291820184905280517f628bd92bbb6002112d3590cfe31c722f97503016b138490288be605a074d91e49281900390910190a15050565b600054600160a01b900460ff1615610ad157600080fd5b6001600160a01b038316610ae457600080fd5b60008054600980546001600160a01b038088166001600160a01b0319928316179092556007869055600885905590871660ff60a01b1960ff60a81b19909316600160a81b1792909216600160a01b17161790556040805133815290517f3f4578db4b3ac464602aae2d3348528a51ef25128a09f4860119a11dc301ec459181900360200190a150505050565b6000908152600460205260409020546001600160a01b031690565b6000546001600160a01b031681565b60028181548110610ba757fe5b6000918252602090912001546001600160a01b0316905081565b60025490565b60606002805480602002602001604051908101604052809291908181526020018280548015610c1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c01575b5050505050905090565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610c7457600080fd5b505afa158015610c88573d6000803e3d6000fd5b505050506040513d6020811015610c9e57600080fd5b505180610d1e575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610cf157600080fd5b505afa158015610d05573d6000803e3d6000fd5b505050506040513d6020811015610d1b57600080fd5b50515b610d595760405162461bcd60e51b815260040180806020018281038252602581526020018061174d6025913960400191505060405180910390fd5b60009182526006602052604090912055565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610db657600080fd5b505afa158015610dca573d6000803e3d6000fd5b505050506040513d6020811015610de057600080fd5b5051610e1d5760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6001600160a01b038116610e3057600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b600054600160a81b900460ff1681565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d6020811015610ee657600080fd5b505180610f66575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d6020811015610f6357600080fd5b50515b610fa15760405162461bcd60e51b81526004018080602001828103825260288152602001806117726028913960400191505060405180910390fd5b6001600160a01b03811660009081526005602052604090205415610ff65760405162461bcd60e51b81526004018080602001828103825260278152602001806116fe6027913960400191505060405180910390fd5b6000816001600160a01b0316632c77f6566040518163ffffffff1660e01b815260040160206040518083038186803b15801561103157600080fd5b505afa158015611045573d6000803e3d6000fd5b505050506040513d602081101561105b57600080fd5b505190508061109b5760405162461bcd60e51b81526004018080602001828103825260298152602001806116776029913960400191505060405180910390fd5b60038054600101808255600090815260046020908152604080832080546001600160a01b0319166001600160a01b038816908117909155935484845260058352818420819055858452600683529281902083905580519384529083019190915280517fb397ea829c3dad5af04b9f5976e06a3a011d99ca1caa5b41515196c894a0be5b9281900390910190a15050565b6001600160a01b031660009081526005602052604090205490565b600061115285856112b2565b60405163824fa82160e01b8152602060048201908152602482018590529192506001600160a01b0383169163824fa82191869186918190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b1580156111c857600080fd5b505af11580156111dc573d6000803e3d6000fd5b50505050949350505050565b7f53570b66c9642abfc1b1b74ee3dff9b6aeb7638291a5983f7881f58149d86cd781565b6000805460408051632474521560e21b81527f53570b66c9642abfc1b1b74ee3dff9b6aeb7638291a5983f7881f58149d86cd760048201526001600160a01b038581166024830152915191909216916391d14854916044808301926020929190829003018186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d60208110156112aa57600080fd5b505192915050565b60008054600160a81b900460ff1615611404576000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561131057600080fd5b505afa158015611324573d6000803e3d6000fd5b505050506040513d602081101561133a57600080fd5b5051806113ba57506000546040805163099db01760e01b815233600482015290516001600160a01b039092169163099db01791602480820192602092909190829003018186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d60208110156113b757600080fd5b50515b806113c957506113c93361120c565b6114045760405162461bcd60e51b81526004018080602001828103825260308152602001806116ce6030913960400191505060405180910390fd5b6007543410156114455760405162461bcd60e51b815260040180806020018281038252602e8152602001806116a0602e913960400191505060405180910390fd5b6000838152600460205260409020546001600160a01b031661146657600080fd5b6000346001600160a01b0384161580159061148f57506009546001600160a01b03858116911614155b156114aa576103e86008548202816114a357fe5b0491508190035b6000858152600460205260409020546114cb906001600160a01b0316611624565b60408051606081018252600180825260208083018a8152600280548587019081526001600160a01b0388811660008181528787528981209851895460ff191690151517895594518888015591519683019690965581549485019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90930180546001600160a01b031916841790558a8152600482528490205484519316835292519396509233927f6e766a2e8ac6e7ecbc0956ba73fdf9e546312daf00a15a6817b8ca66159bd7ab928290030190a380156115de576009546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156115dc573d6000803e3d6000fd5b505b811561161c576040516001600160a01b0385169083156108fc029084906000818181858888f1935050505015801561161a573d6000803e3d6000fd5b505b505092915050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f094935050505056fe4d49534f4661726d466163746f72793a20496e636f72726563742074656d706c61746520636f6465204d49534f4661726d466163746f72793a204661696c656420746f207472616e73666572206d696e696d756d4665654d49534f4661726d466163746f72793a2053656e646572206d757374206265206d696e746572206966206c6f636b65644d49534f4661726d466163746f72793a2054656d706c61746520616c72656164792061646465644d49534f4661726d466163746f72793a2052616e67652069732066726f6d203020746f20313030304d49534f4661726d466163746f72793a2053656e646572206d7573742062652061646d696e4d49534f4661726d466163746f72793a2053656e646572206d757374206265206f70657261746f72a26469706673582212207c7c77fd0d289051428c90faa5bdaaa6203176281e0edcfab95b85f4374ac86064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addFarmTemplate(address)": {
        "details": "Should have operator access.",
        "params": {
          "_template": "Farm template address to create a farm."
        }
      },
      "createFarm(uint256,address,bytes)": {
        "details": "Initializes farm with the parameters passed.",
        "params": {
          "_data": "Data to be passed to the farm contract for init.",
          "_integratorFeeAccount": "Address to pay the fee to.",
          "_templateId": "Template id of the farm to create."
        },
        "returns": {
          "farm": "address."
        }
      },
      "deployFarm(uint256,address)": {
        "params": {
          "_integratorFeeAccount": "Address to pay the fee to.",
          "_templateId": "Template id of the farm to create."
        },
        "returns": {
          "farm": "address."
        }
      },
      "getFarmTemplate(uint256)": {
        "params": {
          "_farmTemplate": "Farm template ID."
        },
        "returns": {
          "_0": "Address of the required template ID."
        }
      },
      "getFarms()": {
        "returns": {
          "_0": "created farms."
        }
      },
      "getTemplateId(address)": {
        "params": {
          "_farmTemplate": "Farm template address."
        },
        "returns": {
          "_0": "ID of the required template address."
        }
      },
      "hasFarmMinterRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "initMISOFarmFactory(address,address,uint256,uint256)": {
        "details": "Can only be initialized once",
        "params": {
          "_accessControls": "Sets address to get the access controls from.",
          "_integratorFeePct": "Fee to UI integration",
          "_minimumFee": "Sets a minimum fee for creating farm in the factory.",
          "_misoDiv": "Sets address to send the dividends."
        }
      },
      "numberOfFarms()": {
        "returns": {
          "_0": "Farms count."
        }
      },
      "removeFarmTemplate(uint256)": {
        "details": "Should have operator access.",
        "params": {
          "_templateId": "Refers to template ID that is to be deleted."
        }
      },
      "setCurrentTemplateId(uint256,uint256)": {
        "params": {
          "_templateId": "The ID of the current template for that type",
          "_templateType": "Type of template."
        }
      },
      "setDividends(address)": {
        "params": {
          "_divaddr": "Dividend address."
        }
      },
      "setIntegratorFeePct(uint256)": {
        "params": {
          "_amount": "Percentage amount."
        }
      },
      "setLocked(bool)": {
        "params": {
          "_locked": "bool."
        }
      },
      "setMinimumFee(uint256)": {
        "params": {
          "_amount": "Fee amount."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FarmCreated(address,address,address)": {
        "notice": "Event emitted when a farm is created using template id."
      },
      "FarmTemplateAdded(address,uint256)": {
        "notice": "Event emitted when farm template is added to factory."
      },
      "FarmTemplateRemoved(address,uint256)": {
        "notice": "Event emitted when farm template is removed."
      },
      "MisoInitFarmFactory(address)": {
        "notice": "Event emitted when first initializing the Miso Farm Factory."
      }
    },
    "kind": "user",
    "methods": {
      "accessControls()": {
        "notice": "Responsible for access rights to the contract."
      },
      "addFarmTemplate(address)": {
        "notice": "Function to add a farm template to create through factory."
      },
      "createFarm(uint256,address,bytes)": {
        "notice": "Creates a farm corresponding to the _templateId."
      },
      "deployFarm(uint256,address)": {
        "notice": "Deploys a farm corresponding to the _templateId and transfers fees."
      },
      "farmInfo(address)": {
        "notice": "Mapping from auction created through this contract to Auction struct."
      },
      "farmTemplateId()": {
        "notice": "Template id to track respective farm template."
      },
      "farms(uint256)": {
        "notice": "Farms created using the factory."
      },
      "getFarmTemplate(uint256)": {
        "notice": "Get the address based on template ID."
      },
      "getFarms()": {
        "notice": "Get all farm created in the factory."
      },
      "getTemplateId(address)": {
        "notice": "Get the ID based on template address."
      },
      "hasFarmMinterRole(address)": {
        "notice": "Used to check whether an address has the minter role"
      },
      "initMISOFarmFactory(address,address,uint256,uint256)": {
        "notice": "Single gateway to initialize the MISO Farm factory with proper address."
      },
      "locked()": {
        "notice": "Contract locked status. If locked, only minters can deploy"
      },
      "minimumFee()": {
        "notice": "Minimum fee to create a farm through the factory."
      },
      "misoDiv()": {
        "notice": "Any MISO dividends collected are sent here."
      },
      "numberOfFarms()": {
        "notice": "Get the total number of farms in the factory."
      },
      "removeFarmTemplate(uint256)": {
        "notice": "Function to remove a farm template."
      },
      "setCurrentTemplateId(uint256,uint256)": {
        "notice": "Sets the current template ID for any type."
      },
      "setDividends(address)": {
        "notice": "Sets dividend address."
      },
      "setIntegratorFeePct(uint256)": {
        "notice": "Sets integrator fee percentage."
      },
      "setLocked(bool)": {
        "notice": "Sets the factory to be locked or unlocked."
      },
      "setMinimumFee(uint256)": {
        "notice": "Sets the minimum fee."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13564,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "accessControls",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MISOAccessControls)583"
      },
      {
        "astId": 13572,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "initialised",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13575,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "locked",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13587,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "farmInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Farm)13582_storage)"
      },
      {
        "astId": 13591,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "farms",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13594,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "farmTemplateId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13599,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "farmTemplates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13604,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "farmTemplateToId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13608,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "currentTemplateId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13611,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "minimumFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13613,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "integratorFeePct",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13616,
        "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
        "label": "misoDiv",
        "offset": 0,
        "slot": "9",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MISOAccessControls)583": {
        "encoding": "inplace",
        "label": "contract MISOAccessControls",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Farm)13582_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MISOFarmFactory.Farm)",
        "numberOfBytes": "32",
        "value": "t_struct(Farm)13582_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Farm)13582_storage": {
        "encoding": "inplace",
        "label": "struct MISOFarmFactory.Farm",
        "members": [
          {
            "astId": 13577,
            "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13579,
            "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
            "label": "templateId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13581,
            "contract": "contracts/MISOFarmFactory.sol:MISOFarmFactory",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}