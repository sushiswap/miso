{
  "address": "0xcDf8F6d9996d60e6708d84182F2FbCE4AF4885b2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MisoInitTokenFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTemplate",
          "type": "address"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TokenInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "name": "TokenTemplateAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        }
      ],
      "name": "TokenTemplateRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN_MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControls",
      "outputs": [
        {
          "internalType": "contract MISOAccessControls",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_template",
          "type": "address"
        }
      ],
      "name": "addTokenTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_integratorFeeAccount",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_integratorFeeAccount",
          "type": "address"
        }
      ],
      "name": "deployToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenTemplate",
          "type": "address"
        }
      ],
      "name": "getTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasTokenMinterRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControls",
          "type": "address"
        }
      ],
      "name": "initMISOTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "integratorFeePct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "misoDiv",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        }
      ],
      "name": "removeTokenTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_templateType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTemplateId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_divaddr",
          "type": "address"
        }
      ],
      "name": "setDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setIntegratorFeePct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_locked",
          "type": "bool"
        }
      ],
      "name": "setLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setMinimumFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "templateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenTemplateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa30cebf8a2d077d7223d1231321f70f9768609373a7f19e32e856f26ae6b44d6",
  "receipt": {
    "to": null,
    "from": "0x5DB5bEdffa57dc3DcEF5D0201eD747E4BC114650",
    "contractAddress": "0xcDf8F6d9996d60e6708d84182F2FbCE4AF4885b2",
    "transactionIndex": 117,
    "gasUsed": "1593026",
    "logsBloom": "0x
    "blockHash": "0x7b2394787835b7c0714ab88d606bf48063de5838c06349703a37ff6ea1ec92af",
    "transactionHash": "0xa30cebf8a2d077d7223d1231321f70f9768609373a7f19e32e856f26ae6b44d6",
    "logs": [
      {
        "transactionIndex": 117,
        "blockNumber": 20406456,
        "transactionHash": "0xa30cebf8a2d077d7223d1231321f70f9768609373a7f19e32e856f26ae6b44d6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005db5bedffa57dc3dcef5d0201ed747e4bc114650",
          "0x00000000000000000000000025c32fd6ed7b84435a222084ef3fdbb36252b8de"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a9c976117058000000000000000000000000000000000000000000000000002cce8d29e768a82200000000000000000000000000000000000000000000000011a992e6439012130000000000000000000000000000000000000000000000002c24c3b3d5f8502200000000000000000000000000000000000000000000000012535c5c55006a13",
        "logIndex": 645,
        "blockHash": "0x7b2394787835b7c0714ab88d606bf48063de5838c06349703a37ff6ea1ec92af"
      }
    ],
    "blockNumber": 20406456,
    "cumulativeGasUsed": "16031014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1fb438077347298e0d57961a6b349fd4",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MisoInitTokenFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTemplate\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"TokenTemplateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"TokenTemplateRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract MISOAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_template\",\"type\":\"address\"}],\"name\":\"addTokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_integratorFeeAccount\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_integratorFeeAccount\",\"type\":\"address\"}],\"name\":\"deployToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenTemplate\",\"type\":\"address\"}],\"name\":\"getTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"getTokenTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasTokenMinterRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"initMISOTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"integratorFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"misoDiv\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"removeTokenTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_templateType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"}],\"name\":\"setCurrentTemplateId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_divaddr\",\"type\":\"address\"}],\"name\":\"setDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setIntegratorFeePct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinimumFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTemplateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenTemplate(address)\":{\"details\":\"Should have operator access.\",\"params\":{\"_template\":\"Token template to create a token.\"}},\"createToken(uint256,address,bytes)\":{\"details\":\"Initializes token with parameters passed.\",\"params\":{\"_data\":\"Data to be passed to the token contract for init.\",\"_integratorFeeAccount\":\"Address to pay the fee to.\",\"_templateId\":\"Template id of token to create.\"},\"returns\":{\"token\":\"Token address.\"}},\"deployToken(uint256,address)\":{\"details\":\"Initializes token with parameters passed\",\"params\":{\"_integratorFeeAccount\":\"Address to pay the fee to.\",\"_templateId\":\"Template id of token to create.\"},\"returns\":{\"token\":\"Token address.\"}},\"getTemplateId(address)\":{\"params\":{\"_tokenTemplate\":\"Token template address.\"},\"returns\":{\"_0\":\"ID of the required template address.\"}},\"getTokenTemplate(uint256)\":{\"params\":{\"_templateId\":\"Token template ID.\"},\"returns\":{\"_0\":\"Address of the required template ID.\"}},\"hasTokenMinterRole(address)\":{\"params\":{\"_address\":\"EOA or contract being checked\"},\"returns\":{\"_0\":\"bool True if the account has the role or false if it does not\"}},\"initMISOTokenFactory(address)\":{\"details\":\"GP: Migrate to the BentoBox.\"},\"numberOfTokens()\":{\"returns\":{\"_0\":\"Token count.\"}},\"removeTokenTemplate(uint256)\":{\"details\":\"Should have operator access.\",\"params\":{\"_templateId\":\"Refers to template that is to be deleted.\"}},\"setCurrentTemplateId(uint256,uint256)\":{\"params\":{\"_templateId\":\"The ID of the current template for that type\",\"_templateType\":\"Type of template.\"}},\"setDividends(address)\":{\"params\":{\"_divaddr\":\"Dividend address.\"}},\"setIntegratorFeePct(uint256)\":{\"params\":{\"_amount\":\"Percentage amount.\"}},\"setLocked(bool)\":{\"params\":{\"_locked\":\"bool.\"}},\"setMinimumFee(uint256)\":{\"params\":{\"_amount\":\"Fee amount.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"MisoInitTokenFactory(address)\":{\"notice\":\"Event emitted when first initializing Miso Token Factory.\"},\"TokenCreated(address,address,address)\":{\"notice\":\"Event emitted when a token is created using template id.\"},\"TokenInitialized(address,uint256,bytes)\":{\"notice\":\"event emitted when a token is initialized using template id\"},\"TokenTemplateAdded(address,uint256)\":{\"notice\":\"Event emitted when a token template is added.\"},\"TokenTemplateRemoved(address,uint256)\":{\"notice\":\"Event emitted when a token template is removed.\"}},\"kind\":\"user\",\"methods\":{\"accessControls()\":{\"notice\":\"Responsible for access rights to the contract\"},\"addTokenTemplate(address)\":{\"notice\":\"Function to add a token template to create through factory.\"},\"createToken(uint256,address,bytes)\":{\"notice\":\"Creates a token corresponding to template id.\"},\"currentTemplateId(uint256)\":{\"notice\":\"mapping from template type to template id\"},\"deployToken(uint256,address)\":{\"notice\":\"Creates a token corresponding to template id and transfers fees.\"},\"getTemplateId(address)\":{\"notice\":\"Get the ID based on template address.\"},\"getTokenTemplate(uint256)\":{\"notice\":\"Get the address based on template ID.\"},\"hasTokenMinterRole(address)\":{\"notice\":\"Used to check whether an address has the minter role\"},\"locked()\":{\"notice\":\"Contract locked status. If locked, only minters can deploy\"},\"minimumFee()\":{\"notice\":\"Minimum fee to create a token through the factory.\"},\"misoDiv()\":{\"notice\":\"Any MISO dividends collected are sent here.\"},\"numberOfTokens()\":{\"notice\":\"Get the total number of tokens in the factory.\"},\"removeTokenTemplate(uint256)\":{\"notice\":\"Function to remove a token template.\"},\"setCurrentTemplateId(uint256,uint256)\":{\"notice\":\"Sets the current template ID for any type.\"},\"setDividends(address)\":{\"notice\":\"Sets dividend address.\"},\"setIntegratorFeePct(uint256)\":{\"notice\":\"Sets integrator fee percentage.\"},\"setLocked(bool)\":{\"notice\":\"Sets the factory to be locked or unlocked.\"},\"setMinimumFee(uint256)\":{\"notice\":\"Sets the minimum fee.\"},\"tokenInfo(address)\":{\"notice\":\"Mapping from token address created through this contract to Token struct.\"},\"tokenTemplateId()\":{\"notice\":\"Template id to track respective token template.\"},\"tokens(uint256)\":{\"notice\":\"Array of tokens created using the factory.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MISOTokenFactory.sol\":\"MISOTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Access/MISOAccessControls.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"./MISOAdminAccess.sol\\\";\\n\\n/**\\n * @notice Access Controls\\n * @author Attr: BlockRocket.tech\\n */\\ncontract MISOAccessControls is MISOAdminAccess {\\n    /// @notice Role definitions\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant SMART_CONTRACT_ROLE = keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /// @notice Events for adding and removing various roles\\n\\n    event MinterRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event MinterRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event OperatorRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event SmartContractRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    /**\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\n     */\\n    constructor() public {\\n    }\\n\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasMinterRole(address _address) public view returns (bool) {\\n        return hasRole(MINTER_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the smart contract role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasSmartContractRole(address _address) public view returns (bool) {\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the operator role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasOperatorRole(address _address) public view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the minter role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addMinterRole(address _address) external {\\n        grantRole(MINTER_ROLE, _address);\\n        emit MinterRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the minter role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeMinterRole(address _address) external {\\n        revokeRole(MINTER_ROLE, _address);\\n        emit MinterRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the smart contract role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addSmartContractRole(address _address) external {\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the smart contract role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeSmartContractRole(address _address) external {\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Grants the operator role to an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract receiving the new role\\n     */\\n    function addOperatorRole(address _address) external {\\n        grantRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the operator role from an address\\n     * @dev The sender must have the admin role\\n     * @param _address EOA or contract affected\\n     */\\n    function removeOperatorRole(address _address) external {\\n        revokeRole(OPERATOR_ROLE, _address);\\n        emit OperatorRoleRemoved(_address, _msgSender());\\n    }\\n\\n}\\n\",\"keccak256\":\"0xdb3765654240248cec4a2e8bb2cd33164dbdd631118833eea52bd6199cc39c13\",\"license\":\"GPL-3.0-only\"},\"contracts/Access/MISOAdminAccess.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.6.12;\\n\\nimport \\\"../OpenZeppelin/access/AccessControl.sol\\\";\\n\\n\\ncontract MISOAdminAccess is AccessControl {\\n\\n    /// @dev Whether access is initialised.\\n    bool private initAccess;\\n\\n    /// @notice Events for adding and removing various roles.\\n    event AdminRoleGranted(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n    event AdminRoleRemoved(\\n        address indexed beneficiary,\\n        address indexed caller\\n    );\\n\\n\\n    /// @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses.\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Initializes access controls.\\n     * @param _admin Admins address.\\n     */\\n    function initAccessControls(address _admin) public {\\n        require(!initAccess, \\\"Already initialised\\\");\\n        require(_admin != address(0), \\\"Incorrect input\\\");\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n        initAccess = true;\\n    }\\n\\n    /////////////\\n    // Lookups //\\n    /////////////\\n\\n    /**\\n     * @notice Used to check whether an address has the admin role.\\n     * @param _address EOA or contract being checked.\\n     * @return bool True if the account has the role or false if it does not.\\n     */\\n    function hasAdminRole(address _address) public  view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\n    }\\n\\n    ///////////////\\n    // Modifiers //\\n    ///////////////\\n\\n    /**\\n     * @notice Grants the admin role to an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract receiving the new role.\\n     */\\n    function addAdminRole(address _address) external {\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleGranted(_address, _msgSender());\\n    }\\n\\n    /**\\n     * @notice Removes the admin role from an address.\\n     * @dev The sender must have the admin role.\\n     * @param _address EOA or contract affected.\\n     */\\n    function removeAdminRole(address _address) external {\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\n        emit AdminRoleRemoved(_address, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x90b919dd0f8bb50174e958858fe7d025e6b9a096ca5aa5516f812342af398262\",\"license\":\"GPL-3.0-only\"},\"contracts/MISOTokenFactory.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\n//----------------------------------------------------------------------------------\\n//    I n s t a n t\\n//\\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.  \\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'  \\n//\\n//----------------------------------------------------------------------------------\\n//\\n// Chef Gonpachi's MISO Token Factory\\n//\\n// A factory to conveniently deploy your own source code verified  token contracts\\n//\\n// Inspired by Bokky's EtherVendingMachince.io\\n// https://github.com/bokkypoobah/FixedSupplyTokenFactory\\n// \\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// The above copyright notice and this permission notice shall be included \\n// in all copies or substantial portions of the Software.\\n//\\n// Made for Sushi.com \\n// \\n// Enjoy. (c) Chef Gonpachi 2021 \\n// <https://github.com/chefgonpachi/MISO/>\\n//\\n// ---------------------------------------------------------------------\\n// SPDX-License-Identifier: GPL-3.0                        \\n// ---------------------------------------------------------------------\\n\\n\\nimport \\\"./Utils/CloneFactory.sol\\\";\\nimport \\\"./interfaces/IMisoToken.sol\\\";\\nimport \\\"./Access/MISOAccessControls.sol\\\";\\nimport \\\"./Utils/SafeTransfer.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract MISOTokenFactory is CloneFactory, SafeTransfer{\\n    \\n    /// @notice Responsible for access rights to the contract\\n    MISOAccessControls public accessControls;\\n    bytes32 public constant TOKEN_MINTER_ROLE = keccak256(\\\"TOKEN_MINTER_ROLE\\\");\\n\\n    /// @notice Constant to indicate precision\\n    uint256 private constant INTEGRATOR_FEE_PRECISION = 1000;\\n\\n    /// @notice Whether token factory has been initialized or not.\\n    bool private initialised;\\n\\n    /// @notice Struct to track Token template.\\n    struct Token {\\n        bool exists;\\n        uint256 templateId;\\n        uint256 index;\\n    }\\n\\n    /// @notice Mapping from token address created through this contract to Token struct.\\n    mapping(address => Token) public tokenInfo;\\n\\n    /// @notice Array of tokens created using the factory.\\n    address[] public tokens;\\n\\n    /// @notice Template id to track respective token template.\\n    uint256 public tokenTemplateId;\\n\\n    /// @notice Mapping from token template id to token template address.\\n    mapping(uint256 => address) private tokenTemplates;\\n\\n    /// @notice mapping from token template address to token template id\\n    mapping(address => uint256) private tokenTemplateToId;\\n\\n    /// @notice mapping from template type to template id\\n    mapping(uint256 => uint256) public currentTemplateId;\\n\\n    /// @notice Minimum fee to create a token through the factory.\\n    uint256 public minimumFee;\\n    uint256 public integratorFeePct;\\n\\n    /// @notice Contract locked status. If locked, only minters can deploy\\n    bool public locked;\\n\\n    /// @notice Any MISO dividends collected are sent here.\\n    address payable public misoDiv;\\n\\n    /// @notice Event emitted when first initializing Miso Token Factory.\\n    event MisoInitTokenFactory(address sender);\\n\\n    /// @notice Event emitted when a token is created using template id.\\n    event TokenCreated(address indexed owner, address indexed addr, address tokenTemplate);\\n    \\n    /// @notice event emitted when a token is initialized using template id\\n    event TokenInitialized(address indexed addr, uint256 templateId, bytes data);\\n\\n    /// @notice Event emitted when a token template is added.\\n    event TokenTemplateAdded(address newToken, uint256 templateId);\\n\\n    /// @notice Event emitted when a token template is removed.\\n    event TokenTemplateRemoved(address token, uint256 templateId);\\n\\n    constructor() public {\\n    }\\n\\n    /**\\n     * @notice Single gateway to initialize the MISO Token Factory with proper address.\\n     * @dev Can only be initialized once.\\n     * @param _accessControls Sets address to get the access controls from.\\n     */\\n    /// @dev GP: Migrate to the BentoBox.\\n    function initMISOTokenFactory(address _accessControls) external  {\\n        require(!initialised);\\n        initialised = true;\\n        locked = true;\\n        accessControls = MISOAccessControls(_accessControls);\\n        emit MisoInitTokenFactory(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum fee.\\n     * @param _amount Fee amount.\\n     */\\n    function setMinimumFee(uint256 _amount) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be operator\\\"\\n        );\\n        minimumFee = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets integrator fee percentage.\\n     * @param _amount Percentage amount.\\n     */\\n    function setIntegratorFeePct(uint256 _amount) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be operator\\\"\\n        );\\n        /// @dev this is out of 1000, ie 25% = 250\\n        require(\\n            _amount <= INTEGRATOR_FEE_PRECISION, \\n            \\\"MISOTokenFactory: Range is from 0 to 1000\\\"\\n        );\\n        integratorFeePct = _amount;\\n    }\\n\\n    /**\\n     * @notice Sets dividend address.\\n     * @param _divaddr Dividend address.\\n     */\\n    function setDividends(address payable _divaddr) external  {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be operator\\\"\\n        );\\n        require(_divaddr != address(0));\\n        misoDiv = _divaddr;\\n    }    \\n    \\n    /**\\n     * @notice Sets the factory to be locked or unlocked.\\n     * @param _locked bool.\\n     */\\n    function setLocked(bool _locked) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be admin\\\"\\n        );\\n        locked = _locked;\\n    }\\n\\n\\n    /**\\n     * @notice Sets the current template ID for any type.\\n     * @param _templateType Type of template.\\n     * @param _templateId The ID of the current template for that type\\n     */\\n    function setCurrentTemplateId(uint256 _templateType, uint256 _templateId) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be admin\\\"\\n        );\\n        require(tokenTemplates[_templateId] != address(0), \\\"MISOTokenFactory: incorrect _templateId\\\");\\n        require(IMisoToken(tokenTemplates[_templateId]).tokenTemplate() == _templateType, \\\"MISOTokenFactory: incorrect _templateType\\\");\\n        currentTemplateId[_templateType] = _templateId;\\n    }\\n\\n    /**\\n     * @notice Used to check whether an address has the minter role\\n     * @param _address EOA or contract being checked\\n     * @return bool True if the account has the role or false if it does not\\n     */\\n    function hasTokenMinterRole(address _address) public view returns (bool) {\\n        return accessControls.hasRole(TOKEN_MINTER_ROLE, _address);\\n    }\\n\\n\\n\\n    /**\\n     * @notice Creates a token corresponding to template id and transfers fees.\\n     * @dev Initializes token with parameters passed\\n     * @param _templateId Template id of token to create.\\n     * @param _integratorFeeAccount Address to pay the fee to.\\n     * @return token Token address.\\n     */\\n    function deployToken(\\n        uint256 _templateId,\\n        address payable _integratorFeeAccount\\n    )\\n        public payable returns (address token)\\n    {\\n        /// @dev If the contract is locked, only admin and minters can deploy. \\n        if (locked) {\\n            require(accessControls.hasAdminRole(msg.sender) \\n                    || accessControls.hasMinterRole(msg.sender)\\n                    || hasTokenMinterRole(msg.sender),\\n                \\\"MISOTokenFactory: Sender must be minter if locked\\\"\\n            );\\n        }\\n        require(msg.value >= minimumFee, \\\"MISOTokenFactory: Failed to transfer minimumFee\\\");\\n        require(tokenTemplates[_templateId] != address(0), \\\"MISOTokenFactory: incorrect _templateId\\\");\\n        uint256 integratorFee = 0;\\n        uint256 misoFee = msg.value;\\n        if (_integratorFeeAccount != address(0) && _integratorFeeAccount != misoDiv) {\\n            integratorFee = misoFee * integratorFeePct / INTEGRATOR_FEE_PRECISION;\\n            misoFee = misoFee - integratorFee;\\n        }\\n        token = createClone(tokenTemplates[_templateId]);\\n        /// @dev GP: Triple check the token index is correct.\\n        tokenInfo[token] = Token(true, _templateId, tokens.length);\\n        tokens.push(token);\\n        emit TokenCreated(msg.sender, token, tokenTemplates[_templateId]);\\n        if (misoFee > 0) {\\n            misoDiv.transfer(misoFee);\\n        }\\n        if (integratorFee > 0) {\\n            _integratorFeeAccount.transfer(integratorFee);\\n        }\\n    }\\n\\n    /**\\n     * @notice Creates a token corresponding to template id.\\n     * @dev Initializes token with parameters passed.\\n     * @param _templateId Template id of token to create.\\n     * @param _integratorFeeAccount Address to pay the fee to.\\n     * @param _data Data to be passed to the token contract for init.\\n     * @return token Token address.\\n     */\\n    function createToken(\\n        uint256 _templateId,\\n        address payable _integratorFeeAccount,\\n        bytes calldata _data\\n    )\\n        external payable returns (address token)\\n    {\\n        token = deployToken(_templateId, _integratorFeeAccount);\\n        emit TokenInitialized(address(token), _templateId, _data);\\n        IMisoToken(token).initToken(_data);\\n        uint256 initialTokens = IERC20(token).balanceOf(address(this));\\n        if (initialTokens > 0 ) {\\n            _safeTransfer(token, msg.sender, initialTokens);\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to add a token template to create through factory.\\n     * @dev Should have operator access.\\n     * @param _template Token template to create a token.\\n     */\\n    function addTokenTemplate(address _template) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be operator\\\"\\n        );\\n        uint256 templateType = IMisoToken(_template).tokenTemplate();\\n        require(templateType > 0, \\\"MISOTokenFactory: Incorrect template code \\\");\\n        require(tokenTemplateToId[_template] == 0, \\\"MISOTokenFactory: Template exists\\\");\\n        tokenTemplateId++;\\n        tokenTemplates[tokenTemplateId] = _template;\\n        tokenTemplateToId[_template] = tokenTemplateId;\\n        currentTemplateId[templateType] = tokenTemplateId;\\n        emit TokenTemplateAdded(_template, tokenTemplateId);\\n\\n    }\\n\\n    /**\\n     * @notice Function to remove a token template.\\n     * @dev Should have operator access.\\n     * @param _templateId Refers to template that is to be deleted.\\n    */\\n    function removeTokenTemplate(uint256 _templateId) external {\\n        require(\\n            accessControls.hasAdminRole(msg.sender) ||\\n            accessControls.hasOperatorRole(msg.sender),\\n            \\\"MISOTokenFactory: Sender must be operator\\\"\\n        );\\n        require(tokenTemplates[_templateId] != address(0));\\n        address template = tokenTemplates[_templateId];\\n        uint256 templateType = IMisoToken(tokenTemplates[_templateId]).tokenTemplate();\\n        if (currentTemplateId[templateType] == _templateId) {\\n            delete currentTemplateId[templateType];\\n        }\\n        tokenTemplates[_templateId] = address(0);\\n        delete tokenTemplateToId[template];\\n        emit TokenTemplateRemoved(template, _templateId);\\n    }\\n\\n    /**\\n     * @notice Get the total number of tokens in the factory.\\n     * @return Token count.\\n     */\\n    function numberOfTokens() external view returns (uint256) {\\n        return tokens.length;\\n    }\\n\\n    function getTokens() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @notice Get the address based on template ID.\\n     * @param _templateId Token template ID.\\n     * @return Address of the required template ID.\\n     */\\n    function getTokenTemplate(uint256 _templateId) external view returns (address ) {\\n        return tokenTemplates[_templateId];\\n    }\\n\\n    /**\\n     * @notice Get the ID based on template address.\\n     * @param _tokenTemplate Token template address.\\n     * @return ID of the required template address.\\n     */\\n    function getTemplateId(address _tokenTemplate) external view returns (uint256) {\\n        return tokenTemplateToId[_tokenTemplate];\\n    }\\n}\\n\",\"keccak256\":\"0xf6f23dd9d472c69c3ec47270909b6e9d7581247da564efc6e218d35ba1198c58\",\"license\":\"GPL-3.0\"},\"contracts/OpenZeppelin/access/AccessControl.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6711f5cfe992294baa43dd8d1d39f2caa1f62761d65abeb3f2a405833da794f2\"},\"contracts/OpenZeppelin/utils/Context.sol\":{\"content\":\"\\n\\npragma solidity 0.6.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x408ed1e8d180f17597080e993fea24a26ec262dd56ee20dfbdcf511d261387d4\"},\"contracts/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x7a5437ee09401a3d1ec98f126470362f9848afbf521510d6bfae61d7b42a8fb7\"},\"contracts/Utils/CloneFactory.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\n// ----------------------------------------------------------------------------\\n// CloneFactory.sol\\n// From\\n// https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n// ----------------------------------------------------------------------------\\n\\n/*\\nThe MIT License (MIT)\\nCopyright (c) 2018 Murray Software, LLC.\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n//solhint-disable max-line-length\\n//solhint-disable no-inline-assembly\\n\\ncontract CloneFactory {\\n\\n  function createClone(address target) internal returns (address result) {\\n    bytes20 targetBytes = bytes20(target);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      result := create(0, clone, 0x37)\\n    }\\n  }\\n\\n  function isClone(address target, address query) internal view returns (bool result) {\\n    bytes20 targetBytes = bytes20(target);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\n      mstore(add(clone, 0xa), targetBytes)\\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\n      let other := add(clone, 0x40)\\n      extcodecopy(query, other, 0, 0x2d)\\n      result := and(\\n        eq(mload(clone), mload(other)),\\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\n      )\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa1d5bbba3b35b50c5044a9f5989914613db64466fd82b17b39ba323e493d33e3\"},\"contracts/Utils/SafeTransfer.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ncontract SafeTransfer {\\n\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _safeTokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _safeTransferETH(_to,_amount );\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n\\n    /// @dev Helper function to handle both ETH and ERC20 payments\\n    function _tokenPayment(\\n        address _token,\\n        address payable _to,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == ETH_ADDRESS) {\\n            _to.transfer(_amount);\\n        } else {\\n            _safeTransfer(_token, _to, _amount);\\n        }\\n    }\\n\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n                abi.encodeWithSelector(0xa9059cbb, to, amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) =\\n            token.call(\\n                // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n                abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n            );\\n        require(success && (data.length == 0 || abi.decode(data, (bool)))); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function _safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0xc2af6cb1d93e3358de826e42b24bb2f108855b1b17d3f40d3da285c1e52e6bd1\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\",\"keccak256\":\"0x9e3da3bb9ec7a825414952ac7fdae2133f873608d059cb40e03ac0194cf1ca40\"},\"contracts/interfaces/IMisoToken.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\ninterface IMisoToken {\\n    function init(bytes calldata data) external payable;\\n    function initToken( bytes calldata data ) external;\\n    function tokenTemplate() external view returns (uint256);\\n\\n}\",\"keccak256\":\"0x892a16bfabfd0a27d9904630bac831140232e5777b5fab4e84fd4da130338397\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611bdc806100206000396000f3fe6080604052600436106101665760003560e01c8063748365ef116100d1578063ad8ff6691161008a578063cf30901211610064578063cf30901214610567578063d335ebda1461057c578063f5dab711146105af578063f9f16ef21461060257610166565b8063ad8ff669146104f5578063b3c9315114610528578063c9907b081461055257610166565b8063748365ef146103605780637b20bccf14610375578063870837d7146103a85780639e5940cc1461042d5780639e9188ea1461045d578063aa6ca8081461049057610166565b8063361dbb4a11610123578063361dbb4a146102865780633f1f44b0146102cd57806343efca82146102f75780634520ca751461030c5780634f64b2be14610321578063512b336d1461034b57610166565b8063042ab9b31461016b5780630bf18f85146101b1578063182a7506146101dd5780631a7626e714610209578063211e28b6146102305780632ed4f5781461025c575b600080fd5b34801561017757600080fd5b506101956004803603602081101561018e57600080fd5b5035610617565b604080516001600160a01b039092168252519081900360200190f35b610195600480360360408110156101c757600080fd5b50803590602001356001600160a01b0316610632565b3480156101e957600080fd5b506102076004803603602081101561020057600080fd5b50356109da565b005b34801561021557600080fd5b5061021e610a91565b60408051918252519081900360200190f35b34801561023c57600080fd5b506102076004803603602081101561025357600080fd5b50351515610a97565b34801561026857600080fd5b5061021e6004803603602081101561027f57600080fd5b5035610b5c565b34801561029257600080fd5b506102b9600480360360208110156102a957600080fd5b50356001600160a01b0316610b6e565b604080519115158252519081900360200190f35b3480156102d957600080fd5b50610207600480360360208110156102f057600080fd5b5035610c14565b34801561030357600080fd5b5061021e610d0c565b34801561031857600080fd5b5061021e610d12565b34801561032d57600080fd5b506101956004803603602081101561034457600080fd5b5035610d18565b34801561035757600080fd5b5061021e610d3f565b34801561036c57600080fd5b50610195610d63565b34801561038157600080fd5b506102076004803603602081101561039857600080fd5b50356001600160a01b0316610d72565b610195600480360360608110156103be57600080fd5b8135916001600160a01b03602082013516918101906060810160408201356401000000008111156103ee57600080fd5b82018360208201111561040057600080fd5b8035906020019184600183028401116401000000008311171561042257600080fd5b50909250905061102c565b34801561043957600080fd5b506102076004803603604081101561045057600080fd5b50803590602001356111ce565b34801561046957600080fd5b506102076004803603602081101561048057600080fd5b50356001600160a01b031661141c565b34801561049c57600080fd5b506104a5611509565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104e15781810151838201526020016104c9565b505050509050019250505060405180910390f35b34801561050157600080fd5b506102076004803603602081101561051857600080fd5b50356001600160a01b031661156b565b34801561053457600080fd5b506102076004803603602081101561054b57600080fd5b50356115f2565b34801561055e57600080fd5b5061019561185b565b34801561057357600080fd5b506102b961186f565b34801561058857600080fd5b5061021e6004803603602081101561059f57600080fd5b50356001600160a01b0316611878565b3480156105bb57600080fd5b506105e2600480360360208110156105d257600080fd5b50356001600160a01b0316611893565b604080519315158452602084019290925282820152519081900360600190f35b34801561060e57600080fd5b5061021e6118b9565b6000908152600460205260409020546001600160a01b031690565b60095460009060ff161561077f576000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50518061073557506000546040805163099db01760e01b815233600482015290516001600160a01b039092169163099db01791602480820192602092909190829003018186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b50515b80610744575061074433610b6e565b61077f5760405162461bcd60e51b8152600401808060200182810382526031815260200180611b766031913960400191505060405180910390fd5b6007543410156107c05760405162461bcd60e51b815260040180806020018281038252602f815260200180611aaa602f913960400191505060405180910390fd5b6000838152600460205260409020546001600160a01b03166108135760405162461bcd60e51b8152600401808060200182810382526027815260200180611a5d6027913960400191505060405180910390fd5b6000346001600160a01b0384161580159061084157506009546001600160a01b038581166101009092041614155b1561085c576103e860085482028161085557fe5b0491508190035b60008581526004602052604090205461087d906001600160a01b03166118bf565b60408051606081018252600180825260208083018a8152600280548587019081526001600160a01b0388811660008181528787528981209851895460ff191690151517895594518888015591519683019690965581549485019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90930180546001600160a01b031916841790558a8152600482528490205484519316835292519396509233927fb5a149b73151b44553ff737ca050c61de65038e2ae67ec044215d3261cc6fa00928290030190a38015610994576009546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610992573d6000803e3d6000fd5b505b81156109d2576040516001600160a01b0385169083156108fc029084906000818181858888f193505050501580156109d0573d6000803e3d6000fd5b505b505092915050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d6020811015610a4f57600080fd5b5051610a8c5760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b600755565b60075481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d6020811015610b0c57600080fd5b5051610b495760405162461bcd60e51b8152600401808060200182810382526026815260200180611a846026913960400191505060405180910390fd5b6009805460ff1916911515919091179055565b60066020526000908152604090205481565b6000805460408051632474521560e21b81527fb3bb6029312d1001076133d40b75b7eca92ba54e4963b3ce24e1486a3d5a038b60048201526001600160a01b038581166024830152915191909216916391d14854916044808301926020929190829003018186803b158015610be257600080fd5b505afa158015610bf6573d6000803e3d6000fd5b505050506040513d6020811015610c0c57600080fd5b505192915050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d6020811015610c8957600080fd5b5051610cc65760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6103e8811115610d075760405162461bcd60e51b8152600401808060200182810382526029815260200180611b4d6029913960400191505060405180910390fd5b600855565b60035481565b60085481565b60028181548110610d2557fe5b6000918252602090912001546001600160a01b0316905081565b7fb3bb6029312d1001076133d40b75b7eca92ba54e4963b3ce24e1486a3d5a038b81565b6000546001600160a01b031681565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6020811015610de757600080fd5b505180610e67575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610e3a57600080fd5b505afa158015610e4e573d6000803e3d6000fd5b505050506040513d6020811015610e6457600080fd5b50515b610ea25760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6000816001600160a01b0316630814d3dd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d6020811015610f0757600080fd5b5051905080610f475760405162461bcd60e51b815260040180806020018281038252602a815260200180611ad9602a913960400191505060405180910390fd5b6001600160a01b03821660009081526005602052604090205415610f9c5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b036021913960400191505060405180910390fd5b60038054600101808255600090815260046020908152604080832080546001600160a01b0319166001600160a01b038816908117909155935484845260058352818420819055858452600683529281902083905580519384529083019190915280517f95595b6ea45697235ed18194d52346c97420d7edf2aa7fc902cb37e25f81962e9281900390910190a15050565b60006110388585610632565b9050806001600160a01b03167fb16d4375f452e77e87811cc8f3549effd92a08a60c760f79ba9e2de067c95e3086858560405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a260405162c1639960e71b8152602060048201908152602482018490526001600160a01b038316916360b1cc809186918691908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561118657600080fd5b505afa15801561119a573d6000803e3d6000fd5b505050506040513d60208110156111b057600080fd5b5051905080156111c5576111c5823383611911565b50949350505050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d602081101561124357600080fd5b5051806112c3575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b15801561129657600080fd5b505afa1580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b50515b6112fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a846026913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b03166113515760405162461bcd60e51b8152600401808060200182810382526027815260200180611a5d6027913960400191505060405180910390fd5b600081815260046020818152604092839020548351630814d3dd60e01b8152935186946001600160a01b0390921693630814d3dd938382019390929190829003018186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d60208110156113cc57600080fd5b50511461140a5760405162461bcd60e51b8152600401808060200182810382526029815260200180611b246029913960400191505060405180910390fd5b60009182526006602052604090912055565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d602081101561149157600080fd5b50516114ce5760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6001600160a01b0381166114e157600080fd5b600980546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6060600280548060200260200160405190810160405280929190818152602001828054801561156157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611543575b5050505050905090565b600054600160a01b900460ff161561158257600080fd5b600080546009805460ff191660011790556001600160a01b0383166001600160a01b031960ff60a01b19909216600160a01b17919091161790556040805133815290517f7baa9936e30f7ec15b3fe4357a0256402fa7ea6780f82e39784f1f27382bd15e9181900360200190a150565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561163d57600080fd5b505afa158015611651573d6000803e3d6000fd5b505050506040513d602081101561166757600080fd5b5051806116e7575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b1580156116ba57600080fd5b505afa1580156116ce573d6000803e3d6000fd5b505050506040513d60208110156116e457600080fd5b50515b6117225760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b031661174357600080fd5b6000818152600460208181526040808420548151630814d3dd60e01b815291516001600160a01b0390911694938593630814d3dd9380830193919290829003018186803b15801561179357600080fd5b505afa1580156117a7573d6000803e3d6000fd5b505050506040513d60208110156117bd57600080fd5b50516000818152600660205260409020549091508314156117e8576000818152600660205260408120555b600083815260046020908152604080832080546001600160a01b03191690556001600160a01b0385168084526005835281842093909355805192835290820185905280517f11eaf16c318162956db9f4f1fc5f7696fabbbf409382c1ddcebfe74b20a92a839281900390910190a1505050565b60095461010090046001600160a01b031681565b60095460ff1681565b6001600160a01b031660009081526005602052604090205490565b600160208190526000918252604090912080549181015460029091015460ff9092169183565b60025490565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061198e5780518252601f19909201916020918201910161196f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119f0576040519150601f19603f3d011682016040523d82523d6000602084013e6119f5565b606091505b5091509150818015611a23575080511580611a235750808060200190516020811015611a2057600080fd5b50515b611a2c57600080fd5b505050505056fe4d49534f546f6b656e466163746f72793a2053656e646572206d757374206265206f70657261746f724d49534f546f6b656e466163746f72793a20696e636f7272656374205f74656d706c61746549644d49534f546f6b656e466163746f72793a2053656e646572206d7573742062652061646d696e4d49534f546f6b656e466163746f72793a204661696c656420746f207472616e73666572206d696e696d756d4665654d49534f546f6b656e466163746f72793a20496e636f72726563742074656d706c61746520636f6465204d49534f546f6b656e466163746f72793a2054656d706c617465206578697374734d49534f546f6b656e466163746f72793a20696e636f7272656374205f74656d706c617465547970654d49534f546f6b656e466163746f72793a2052616e67652069732066726f6d203020746f20313030304d49534f546f6b656e466163746f72793a2053656e646572206d757374206265206d696e746572206966206c6f636b6564a2646970667358221220ea321be2c24ba91f79499622ccd5a32e16d82cf18d60eaccf26d695734af6c9064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c8063748365ef116100d1578063ad8ff6691161008a578063cf30901211610064578063cf30901214610567578063d335ebda1461057c578063f5dab711146105af578063f9f16ef21461060257610166565b8063ad8ff669146104f5578063b3c9315114610528578063c9907b081461055257610166565b8063748365ef146103605780637b20bccf14610375578063870837d7146103a85780639e5940cc1461042d5780639e9188ea1461045d578063aa6ca8081461049057610166565b8063361dbb4a11610123578063361dbb4a146102865780633f1f44b0146102cd57806343efca82146102f75780634520ca751461030c5780634f64b2be14610321578063512b336d1461034b57610166565b8063042ab9b31461016b5780630bf18f85146101b1578063182a7506146101dd5780631a7626e714610209578063211e28b6146102305780632ed4f5781461025c575b600080fd5b34801561017757600080fd5b506101956004803603602081101561018e57600080fd5b5035610617565b604080516001600160a01b039092168252519081900360200190f35b610195600480360360408110156101c757600080fd5b50803590602001356001600160a01b0316610632565b3480156101e957600080fd5b506102076004803603602081101561020057600080fd5b50356109da565b005b34801561021557600080fd5b5061021e610a91565b60408051918252519081900360200190f35b34801561023c57600080fd5b506102076004803603602081101561025357600080fd5b50351515610a97565b34801561026857600080fd5b5061021e6004803603602081101561027f57600080fd5b5035610b5c565b34801561029257600080fd5b506102b9600480360360208110156102a957600080fd5b50356001600160a01b0316610b6e565b604080519115158252519081900360200190f35b3480156102d957600080fd5b50610207600480360360208110156102f057600080fd5b5035610c14565b34801561030357600080fd5b5061021e610d0c565b34801561031857600080fd5b5061021e610d12565b34801561032d57600080fd5b506101956004803603602081101561034457600080fd5b5035610d18565b34801561035757600080fd5b5061021e610d3f565b34801561036c57600080fd5b50610195610d63565b34801561038157600080fd5b506102076004803603602081101561039857600080fd5b50356001600160a01b0316610d72565b610195600480360360608110156103be57600080fd5b8135916001600160a01b03602082013516918101906060810160408201356401000000008111156103ee57600080fd5b82018360208201111561040057600080fd5b8035906020019184600183028401116401000000008311171561042257600080fd5b50909250905061102c565b34801561043957600080fd5b506102076004803603604081101561045057600080fd5b50803590602001356111ce565b34801561046957600080fd5b506102076004803603602081101561048057600080fd5b50356001600160a01b031661141c565b34801561049c57600080fd5b506104a5611509565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104e15781810151838201526020016104c9565b505050509050019250505060405180910390f35b34801561050157600080fd5b506102076004803603602081101561051857600080fd5b50356001600160a01b031661156b565b34801561053457600080fd5b506102076004803603602081101561054b57600080fd5b50356115f2565b34801561055e57600080fd5b5061019561185b565b34801561057357600080fd5b506102b961186f565b34801561058857600080fd5b5061021e6004803603602081101561059f57600080fd5b50356001600160a01b0316611878565b3480156105bb57600080fd5b506105e2600480360360208110156105d257600080fd5b50356001600160a01b0316611893565b604080519315158452602084019290925282820152519081900360600190f35b34801561060e57600080fd5b5061021e6118b9565b6000908152600460205260409020546001600160a01b031690565b60095460009060ff161561077f576000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561068b57600080fd5b505afa15801561069f573d6000803e3d6000fd5b505050506040513d60208110156106b557600080fd5b50518061073557506000546040805163099db01760e01b815233600482015290516001600160a01b039092169163099db01791602480820192602092909190829003018186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d602081101561073257600080fd5b50515b80610744575061074433610b6e565b61077f5760405162461bcd60e51b8152600401808060200182810382526031815260200180611b766031913960400191505060405180910390fd5b6007543410156107c05760405162461bcd60e51b815260040180806020018281038252602f815260200180611aaa602f913960400191505060405180910390fd5b6000838152600460205260409020546001600160a01b03166108135760405162461bcd60e51b8152600401808060200182810382526027815260200180611a5d6027913960400191505060405180910390fd5b6000346001600160a01b0384161580159061084157506009546001600160a01b038581166101009092041614155b1561085c576103e860085482028161085557fe5b0491508190035b60008581526004602052604090205461087d906001600160a01b03166118bf565b60408051606081018252600180825260208083018a8152600280548587019081526001600160a01b0388811660008181528787528981209851895460ff191690151517895594518888015591519683019690965581549485019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90930180546001600160a01b031916841790558a8152600482528490205484519316835292519396509233927fb5a149b73151b44553ff737ca050c61de65038e2ae67ec044215d3261cc6fa00928290030190a38015610994576009546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610992573d6000803e3d6000fd5b505b81156109d2576040516001600160a01b0385169083156108fc029084906000818181858888f193505050501580156109d0573d6000803e3d6000fd5b505b505092915050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610a2557600080fd5b505afa158015610a39573d6000803e3d6000fd5b505050506040513d6020811015610a4f57600080fd5b5051610a8c5760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b600755565b60075481565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610ae257600080fd5b505afa158015610af6573d6000803e3d6000fd5b505050506040513d6020811015610b0c57600080fd5b5051610b495760405162461bcd60e51b8152600401808060200182810382526026815260200180611a846026913960400191505060405180910390fd5b6009805460ff1916911515919091179055565b60066020526000908152604090205481565b6000805460408051632474521560e21b81527fb3bb6029312d1001076133d40b75b7eca92ba54e4963b3ce24e1486a3d5a038b60048201526001600160a01b038581166024830152915191909216916391d14854916044808301926020929190829003018186803b158015610be257600080fd5b505afa158015610bf6573d6000803e3d6000fd5b505050506040513d6020811015610c0c57600080fd5b505192915050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610c5f57600080fd5b505afa158015610c73573d6000803e3d6000fd5b505050506040513d6020811015610c8957600080fd5b5051610cc65760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6103e8811115610d075760405162461bcd60e51b8152600401808060200182810382526029815260200180611b4d6029913960400191505060405180910390fd5b600855565b60035481565b60085481565b60028181548110610d2557fe5b6000918252602090912001546001600160a01b0316905081565b7fb3bb6029312d1001076133d40b75b7eca92ba54e4963b3ce24e1486a3d5a038b81565b6000546001600160a01b031681565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d6020811015610de757600080fd5b505180610e67575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b158015610e3a57600080fd5b505afa158015610e4e573d6000803e3d6000fd5b505050506040513d6020811015610e6457600080fd5b50515b610ea25760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6000816001600160a01b0316630814d3dd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d6020811015610f0757600080fd5b5051905080610f475760405162461bcd60e51b815260040180806020018281038252602a815260200180611ad9602a913960400191505060405180910390fd5b6001600160a01b03821660009081526005602052604090205415610f9c5760405162461bcd60e51b8152600401808060200182810382526021815260200180611b036021913960400191505060405180910390fd5b60038054600101808255600090815260046020908152604080832080546001600160a01b0319166001600160a01b038816908117909155935484845260058352818420819055858452600683529281902083905580519384529083019190915280517f95595b6ea45697235ed18194d52346c97420d7edf2aa7fc902cb37e25f81962e9281900390910190a15050565b60006110388585610632565b9050806001600160a01b03167fb16d4375f452e77e87811cc8f3549effd92a08a60c760f79ba9e2de067c95e3086858560405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a260405162c1639960e71b8152602060048201908152602482018490526001600160a01b038316916360b1cc809186918691908190604401848480828437600081840152601f19601f8201169050808301925050509350505050600060405180830381600087803b15801561111f57600080fd5b505af1158015611133573d6000803e3d6000fd5b505050506000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561118657600080fd5b505afa15801561119a573d6000803e3d6000fd5b505050506040513d60208110156111b057600080fd5b5051905080156111c5576111c5823383611911565b50949350505050565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d602081101561124357600080fd5b5051806112c3575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b15801561129657600080fd5b505afa1580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b50515b6112fe5760405162461bcd60e51b8152600401808060200182810382526026815260200180611a846026913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b03166113515760405162461bcd60e51b8152600401808060200182810382526027815260200180611a5d6027913960400191505060405180910390fd5b600081815260046020818152604092839020548351630814d3dd60e01b8152935186946001600160a01b0390921693630814d3dd938382019390929190829003018186803b1580156113a257600080fd5b505afa1580156113b6573d6000803e3d6000fd5b505050506040513d60208110156113cc57600080fd5b50511461140a5760405162461bcd60e51b8152600401808060200182810382526029815260200180611b246029913960400191505060405180910390fd5b60009182526006602052604090912055565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561146757600080fd5b505afa15801561147b573d6000803e3d6000fd5b505050506040513d602081101561149157600080fd5b50516114ce5760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6001600160a01b0381166114e157600080fd5b600980546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6060600280548060200260200160405190810160405280929190818152602001828054801561156157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611543575b5050505050905090565b600054600160a01b900460ff161561158257600080fd5b600080546009805460ff191660011790556001600160a01b0383166001600160a01b031960ff60a01b19909216600160a01b17919091161790556040805133815290517f7baa9936e30f7ec15b3fe4357a0256402fa7ea6780f82e39784f1f27382bd15e9181900360200190a150565b6000546040805163c395fcb360e01b815233600482015290516001600160a01b039092169163c395fcb391602480820192602092909190829003018186803b15801561163d57600080fd5b505afa158015611651573d6000803e3d6000fd5b505050506040513d602081101561166757600080fd5b5051806116e7575060005460408051637e271f0560e11b815233600482015290516001600160a01b039092169163fc4e3e0a91602480820192602092909190829003018186803b1580156116ba57600080fd5b505afa1580156116ce573d6000803e3d6000fd5b505050506040513d60208110156116e457600080fd5b50515b6117225760405162461bcd60e51b8152600401808060200182810382526029815260200180611a346029913960400191505060405180910390fd5b6000818152600460205260409020546001600160a01b031661174357600080fd5b6000818152600460208181526040808420548151630814d3dd60e01b815291516001600160a01b0390911694938593630814d3dd9380830193919290829003018186803b15801561179357600080fd5b505afa1580156117a7573d6000803e3d6000fd5b505050506040513d60208110156117bd57600080fd5b50516000818152600660205260409020549091508314156117e8576000818152600660205260408120555b600083815260046020908152604080832080546001600160a01b03191690556001600160a01b0385168084526005835281842093909355805192835290820185905280517f11eaf16c318162956db9f4f1fc5f7696fabbbf409382c1ddcebfe74b20a92a839281900390910190a1505050565b60095461010090046001600160a01b031681565b60095460ff1681565b6001600160a01b031660009081526005602052604090205490565b600160208190526000918252604090912080549181015460029091015460ff9092169183565b60025490565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061198e5780518252601f19909201916020918201910161196f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119f0576040519150601f19603f3d011682016040523d82523d6000602084013e6119f5565b606091505b5091509150818015611a23575080511580611a235750808060200190516020811015611a2057600080fd5b50515b611a2c57600080fd5b505050505056fe4d49534f546f6b656e466163746f72793a2053656e646572206d757374206265206f70657261746f724d49534f546f6b656e466163746f72793a20696e636f7272656374205f74656d706c61746549644d49534f546f6b656e466163746f72793a2053656e646572206d7573742062652061646d696e4d49534f546f6b656e466163746f72793a204661696c656420746f207472616e73666572206d696e696d756d4665654d49534f546f6b656e466163746f72793a20496e636f72726563742074656d706c61746520636f6465204d49534f546f6b656e466163746f72793a2054656d706c617465206578697374734d49534f546f6b656e466163746f72793a20696e636f7272656374205f74656d706c617465547970654d49534f546f6b656e466163746f72793a2052616e67652069732066726f6d203020746f20313030304d49534f546f6b656e466163746f72793a2053656e646572206d757374206265206d696e746572206966206c6f636b6564a2646970667358221220ea321be2c24ba91f79499622ccd5a32e16d82cf18d60eaccf26d695734af6c9064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokenTemplate(address)": {
        "details": "Should have operator access.",
        "params": {
          "_template": "Token template to create a token."
        }
      },
      "createToken(uint256,address,bytes)": {
        "details": "Initializes token with parameters passed.",
        "params": {
          "_data": "Data to be passed to the token contract for init.",
          "_integratorFeeAccount": "Address to pay the fee to.",
          "_templateId": "Template id of token to create."
        },
        "returns": {
          "token": "Token address."
        }
      },
      "deployToken(uint256,address)": {
        "details": "Initializes token with parameters passed",
        "params": {
          "_integratorFeeAccount": "Address to pay the fee to.",
          "_templateId": "Template id of token to create."
        },
        "returns": {
          "token": "Token address."
        }
      },
      "getTemplateId(address)": {
        "params": {
          "_tokenTemplate": "Token template address."
        },
        "returns": {
          "_0": "ID of the required template address."
        }
      },
      "getTokenTemplate(uint256)": {
        "params": {
          "_templateId": "Token template ID."
        },
        "returns": {
          "_0": "Address of the required template ID."
        }
      },
      "hasTokenMinterRole(address)": {
        "params": {
          "_address": "EOA or contract being checked"
        },
        "returns": {
          "_0": "bool True if the account has the role or false if it does not"
        }
      },
      "initMISOTokenFactory(address)": {
        "details": "GP: Migrate to the BentoBox."
      },
      "numberOfTokens()": {
        "returns": {
          "_0": "Token count."
        }
      },
      "removeTokenTemplate(uint256)": {
        "details": "Should have operator access.",
        "params": {
          "_templateId": "Refers to template that is to be deleted."
        }
      },
      "setCurrentTemplateId(uint256,uint256)": {
        "params": {
          "_templateId": "The ID of the current template for that type",
          "_templateType": "Type of template."
        }
      },
      "setDividends(address)": {
        "params": {
          "_divaddr": "Dividend address."
        }
      },
      "setIntegratorFeePct(uint256)": {
        "params": {
          "_amount": "Percentage amount."
        }
      },
      "setLocked(bool)": {
        "params": {
          "_locked": "bool."
        }
      },
      "setMinimumFee(uint256)": {
        "params": {
          "_amount": "Fee amount."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "MisoInitTokenFactory(address)": {
        "notice": "Event emitted when first initializing Miso Token Factory."
      },
      "TokenCreated(address,address,address)": {
        "notice": "Event emitted when a token is created using template id."
      },
      "TokenInitialized(address,uint256,bytes)": {
        "notice": "event emitted when a token is initialized using template id"
      },
      "TokenTemplateAdded(address,uint256)": {
        "notice": "Event emitted when a token template is added."
      },
      "TokenTemplateRemoved(address,uint256)": {
        "notice": "Event emitted when a token template is removed."
      }
    },
    "kind": "user",
    "methods": {
      "accessControls()": {
        "notice": "Responsible for access rights to the contract"
      },
      "addTokenTemplate(address)": {
        "notice": "Function to add a token template to create through factory."
      },
      "createToken(uint256,address,bytes)": {
        "notice": "Creates a token corresponding to template id."
      },
      "currentTemplateId(uint256)": {
        "notice": "mapping from template type to template id"
      },
      "deployToken(uint256,address)": {
        "notice": "Creates a token corresponding to template id and transfers fees."
      },
      "getTemplateId(address)": {
        "notice": "Get the ID based on template address."
      },
      "getTokenTemplate(uint256)": {
        "notice": "Get the address based on template ID."
      },
      "hasTokenMinterRole(address)": {
        "notice": "Used to check whether an address has the minter role"
      },
      "locked()": {
        "notice": "Contract locked status. If locked, only minters can deploy"
      },
      "minimumFee()": {
        "notice": "Minimum fee to create a token through the factory."
      },
      "misoDiv()": {
        "notice": "Any MISO dividends collected are sent here."
      },
      "numberOfTokens()": {
        "notice": "Get the total number of tokens in the factory."
      },
      "removeTokenTemplate(uint256)": {
        "notice": "Function to remove a token template."
      },
      "setCurrentTemplateId(uint256,uint256)": {
        "notice": "Sets the current template ID for any type."
      },
      "setDividends(address)": {
        "notice": "Sets dividend address."
      },
      "setIntegratorFeePct(uint256)": {
        "notice": "Sets integrator fee percentage."
      },
      "setLocked(bool)": {
        "notice": "Sets the factory to be locked or unlocked."
      },
      "setMinimumFee(uint256)": {
        "notice": "Sets the minimum fee."
      },
      "tokenInfo(address)": {
        "notice": "Mapping from token address created through this contract to Token struct."
      },
      "tokenTemplateId()": {
        "notice": "Template id to track respective token template."
      },
      "tokens(uint256)": {
        "notice": "Array of tokens created using the factory."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16200,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "accessControls",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MISOAccessControls)583"
      },
      {
        "astId": 16212,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "initialised",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16224,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Token)16219_storage)"
      },
      {
        "astId": 16228,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 16231,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "tokenTemplateId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16236,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "tokenTemplates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16241,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "tokenTemplateToId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16246,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "currentTemplateId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16249,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "minimumFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 16251,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "integratorFeePct",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 16254,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "locked",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 16257,
        "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
        "label": "misoDiv",
        "offset": 1,
        "slot": "9",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MISOAccessControls)583": {
        "encoding": "inplace",
        "label": "contract MISOAccessControls",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Token)16219_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MISOTokenFactory.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)16219_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Token)16219_storage": {
        "encoding": "inplace",
        "label": "struct MISOTokenFactory.Token",
        "members": [
          {
            "astId": 16214,
            "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16216,
            "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
            "label": "templateId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16218,
            "contract": "contracts/MISOTokenFactory.sol:MISOTokenFactory",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}